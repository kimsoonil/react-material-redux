{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport TelemetryEvent from \"./TelemetryEvent\";\nimport { scrubTenantFromUri, prependEventNamePrefix } from \"./TelemetryUtils\";\nimport { ServerRequestParameters } from \"../ServerRequestParameters\";\nexport var EVENT_KEYS = {\n  HTTP_PATH: prependEventNamePrefix(\"http_path\"),\n  USER_AGENT: prependEventNamePrefix(\"user_agent\"),\n  QUERY_PARAMETERS: prependEventNamePrefix(\"query_parameters\"),\n  API_VERSION: prependEventNamePrefix(\"api_version\"),\n  RESPONSE_CODE: prependEventNamePrefix(\"response_code\"),\n  O_AUTH_ERROR_CODE: prependEventNamePrefix(\"oauth_error_code\"),\n  HTTP_METHOD: prependEventNamePrefix(\"http_method\"),\n  REQUEST_ID_HEADER: prependEventNamePrefix(\"request_id_header\"),\n  SPE_INFO: prependEventNamePrefix(\"spe_info\"),\n  SERVER_ERROR_CODE: prependEventNamePrefix(\"server_error_code\"),\n  SERVER_SUB_ERROR_CODE: prependEventNamePrefix(\"server_sub_error_code\"),\n  URL: prependEventNamePrefix(\"url\")\n};\n\nvar HttpEvent =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(HttpEvent, _super);\n\n  function HttpEvent(correlationId, eventLabel) {\n    return _super.call(this, prependEventNamePrefix(\"http_event\"), correlationId, eventLabel) || this;\n  }\n\n  Object.defineProperty(HttpEvent.prototype, \"url\", {\n    set: function (url) {\n      var scrubbedUri = scrubTenantFromUri(url);\n      this.event[EVENT_KEYS.URL] = scrubbedUri && scrubbedUri.toLowerCase();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"httpPath\", {\n    set: function (httpPath) {\n      this.event[EVENT_KEYS.HTTP_PATH] = scrubTenantFromUri(httpPath).toLowerCase();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"userAgent\", {\n    set: function (userAgent) {\n      this.event[EVENT_KEYS.USER_AGENT] = userAgent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"queryParams\", {\n    set: function (queryParams) {\n      this.event[EVENT_KEYS.QUERY_PARAMETERS] = ServerRequestParameters.generateQueryParametersString(queryParams);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"apiVersion\", {\n    set: function (apiVersion) {\n      this.event[EVENT_KEYS.API_VERSION] = apiVersion.toLowerCase();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"httpResponseStatus\", {\n    set: function (statusCode) {\n      this.event[EVENT_KEYS.RESPONSE_CODE] = statusCode;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"oAuthErrorCode\", {\n    set: function (errorCode) {\n      this.event[EVENT_KEYS.O_AUTH_ERROR_CODE] = errorCode;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"httpMethod\", {\n    set: function (httpMethod) {\n      this.event[EVENT_KEYS.HTTP_METHOD] = httpMethod;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"requestIdHeader\", {\n    set: function (requestIdHeader) {\n      this.event[EVENT_KEYS.REQUEST_ID_HEADER] = requestIdHeader;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"speInfo\", {\n    /**\r\n     * Indicates whether the request was executed on a ring serving SPE traffic.\r\n     * An empty string indicates this occurred on an outer ring, and the string \"I\"\r\n     * indicates the request occurred on the inner ring\r\n     */\n    set: function (speInfo) {\n      this.event[EVENT_KEYS.SPE_INFO] = speInfo;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"serverErrorCode\", {\n    set: function (errorCode) {\n      this.event[EVENT_KEYS.SERVER_ERROR_CODE] = errorCode;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"serverSubErrorCode\", {\n    set: function (subErrorCode) {\n      this.event[EVENT_KEYS.SERVER_SUB_ERROR_CODE] = subErrorCode;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return HttpEvent;\n}(TelemetryEvent);\n\nexport default HttpEvent;","map":{"version":3,"sources":["../../src/telemetry/HttpEvent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport TelemetryEvent from \"./TelemetryEvent\";\r\nimport { scrubTenantFromUri, prependEventNamePrefix } from \"./TelemetryUtils\";\r\nimport { ServerRequestParameters } from \"../ServerRequestParameters\";\r\nexport var EVENT_KEYS = {\r\n    HTTP_PATH: prependEventNamePrefix(\"http_path\"),\r\n    USER_AGENT: prependEventNamePrefix(\"user_agent\"),\r\n    QUERY_PARAMETERS: prependEventNamePrefix(\"query_parameters\"),\r\n    API_VERSION: prependEventNamePrefix(\"api_version\"),\r\n    RESPONSE_CODE: prependEventNamePrefix(\"response_code\"),\r\n    O_AUTH_ERROR_CODE: prependEventNamePrefix(\"oauth_error_code\"),\r\n    HTTP_METHOD: prependEventNamePrefix(\"http_method\"),\r\n    REQUEST_ID_HEADER: prependEventNamePrefix(\"request_id_header\"),\r\n    SPE_INFO: prependEventNamePrefix(\"spe_info\"),\r\n    SERVER_ERROR_CODE: prependEventNamePrefix(\"server_error_code\"),\r\n    SERVER_SUB_ERROR_CODE: prependEventNamePrefix(\"server_sub_error_code\"),\r\n    URL: prependEventNamePrefix(\"url\")\r\n};\r\nvar HttpEvent = /** @class */ (function (_super) {\r\n    tslib_1.__extends(HttpEvent, _super);\r\n    function HttpEvent(correlationId, eventLabel) {\r\n        return _super.call(this, prependEventNamePrefix(\"http_event\"), correlationId, eventLabel) || this;\r\n    }\r\n    Object.defineProperty(HttpEvent.prototype, \"url\", {\r\n        set: function (url) {\r\n            var scrubbedUri = scrubTenantFromUri(url);\r\n            this.event[EVENT_KEYS.URL] = scrubbedUri && scrubbedUri.toLowerCase();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"httpPath\", {\r\n        set: function (httpPath) {\r\n            this.event[EVENT_KEYS.HTTP_PATH] = scrubTenantFromUri(httpPath).toLowerCase();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"userAgent\", {\r\n        set: function (userAgent) {\r\n            this.event[EVENT_KEYS.USER_AGENT] = userAgent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"queryParams\", {\r\n        set: function (queryParams) {\r\n            this.event[EVENT_KEYS.QUERY_PARAMETERS] = ServerRequestParameters.generateQueryParametersString(queryParams);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"apiVersion\", {\r\n        set: function (apiVersion) {\r\n            this.event[EVENT_KEYS.API_VERSION] = apiVersion.toLowerCase();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"httpResponseStatus\", {\r\n        set: function (statusCode) {\r\n            this.event[EVENT_KEYS.RESPONSE_CODE] = statusCode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"oAuthErrorCode\", {\r\n        set: function (errorCode) {\r\n            this.event[EVENT_KEYS.O_AUTH_ERROR_CODE] = errorCode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"httpMethod\", {\r\n        set: function (httpMethod) {\r\n            this.event[EVENT_KEYS.HTTP_METHOD] = httpMethod;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"requestIdHeader\", {\r\n        set: function (requestIdHeader) {\r\n            this.event[EVENT_KEYS.REQUEST_ID_HEADER] = requestIdHeader;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"speInfo\", {\r\n        /**\r\n         * Indicates whether the request was executed on a ring serving SPE traffic.\r\n         * An empty string indicates this occurred on an outer ring, and the string \"I\"\r\n         * indicates the request occurred on the inner ring\r\n         */\r\n        set: function (speInfo) {\r\n            this.event[EVENT_KEYS.SPE_INFO] = speInfo;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"serverErrorCode\", {\r\n        set: function (errorCode) {\r\n            this.event[EVENT_KEYS.SERVER_ERROR_CODE] = errorCode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HttpEvent.prototype, \"serverSubErrorCode\", {\r\n        set: function (subErrorCode) {\r\n            this.event[EVENT_KEYS.SERVER_SUB_ERROR_CODE] = subErrorCode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return HttpEvent;\r\n}(TelemetryEvent));\r\nexport default HttpEvent;\r\n//# sourceMappingURL=HttpEvent.js.map"]},"metadata":{},"sourceType":"module"}