{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { ClientConfigurationErrorMessage, ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { XhrClient } from \"../XHRClient\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nimport { TrustedAuthority } from \"./TrustedAuthority\";\nimport { NetworkRequestType, Constants, WELL_KNOWN_SUFFIX } from \"../utils/Constants\";\n/**\r\n * @hidden\r\n */\n\nexport var AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"Default\"] = 0] = \"Default\";\n  AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\n})(AuthorityType || (AuthorityType = {}));\n/**\r\n * @hidden\r\n */\n\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, validateAuthority, authorityMetadata) {\n    this.IsValidationEnabled = validateAuthority;\n    this.CanonicalAuthority = authority;\n    this.validateAsUri();\n    this.tenantDiscoveryResponse = authorityMetadata;\n  }\n\n  Authority.isAdfs = function (authorityUrl) {\n    var components = UrlUtils.GetUrlComponents(authorityUrl);\n    var pathSegments = components.PathSegments;\n    return pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS;\n  };\n\n  Object.defineProperty(Authority.prototype, \"AuthorityType\", {\n    get: function () {\n      return Authority.isAdfs(this.canonicalAuthority) ? AuthorityType.Adfs : AuthorityType.Default;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"Tenant\", {\n    get: function () {\n      return this.CanonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.Issuer.replace(/{tenant}|{tenantid}/g, this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Authority.prototype.validateResolved = function () {\n    if (!this.hasCachedMetadata()) {\n      throw \"Please call ResolveEndpointsAsync first\";\n    }\n  };\n\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this.canonicalAuthority;\n    },\n    set: function (url) {\n      this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);\n      this.canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\n    get: function () {\n      if (!this.canonicalAuthorityUrlComponents) {\n        this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);\n      }\n\n      return this.canonicalAuthorityUrlComponents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\n    // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n    get: function () {\n      return this.AuthorityType === AuthorityType.Adfs ? \"\" + this.CanonicalAuthority + WELL_KNOWN_SUFFIX : this.CanonicalAuthority + \"v2.0/\" + WELL_KNOWN_SUFFIX;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Given a string, validate that it is of the form https://domain/path\r\n   */\n\n  Authority.prototype.validateAsUri = function () {\n    var components;\n\n    try {\n      components = this.CanonicalAuthorityUrlComponents;\n    } catch (e) {\n      throw ClientConfigurationErrorMessage.invalidAuthorityType;\n    }\n\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationErrorMessage.authorityUriInsecure;\n    }\n\n    if (!components.PathSegments || components.PathSegments.length < 1) {\n      throw ClientConfigurationErrorMessage.authorityUriInvalidPath;\n    }\n  };\n  /**\r\n   * Calls the OIDC endpoint and returns the response\r\n   */\n\n\n  Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint, telemetryManager, correlationId) {\n    var client = new XhrClient();\n    var httpMethod = NetworkRequestType.GET;\n    var httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, openIdConfigurationEndpoint, \"openIdConfigurationEndpoint\");\n    return client.sendRequestAsync(openIdConfigurationEndpoint, httpMethod,\n    /* enableCaching: */\n    true).then(function (response) {\n      httpEvent.httpResponseStatus = response.statusCode;\n      telemetryManager.stopEvent(httpEvent);\n      return {\n        AuthorizationEndpoint: response.body.authorization_endpoint,\n        EndSessionEndpoint: response.body.end_session_endpoint,\n        Issuer: response.body.issuer\n      };\n    }).catch(function (err) {\n      httpEvent.serverErrorCode = err;\n      telemetryManager.stopEvent(httpEvent);\n      throw err;\n    });\n  };\n  /**\r\n   * Returns a promise.\r\n   * Checks to see if the authority is in the cache\r\n   * Discover endpoints via openid-configuration\r\n   * If successful, caches the endpoint for later use in OIDC\r\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function (telemetryManager, correlationId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var host, openIdConfigurationEndpointResponse, _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.IsValidationEnabled) return [3\n            /*break*/\n            , 3];\n            host = this.canonicalAuthorityUrlComponents.HostNameAndPort;\n            if (!(TrustedAuthority.getTrustedHostList().length === 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , TrustedAuthority.setTrustedAuthoritiesFromNetwork(this.canonicalAuthority, telemetryManager, correlationId)];\n\n          case 1:\n            _b.sent();\n\n            _b.label = 2;\n\n          case 2:\n            if (!TrustedAuthority.IsInTrustedHostList(host)) {\n              throw ClientConfigurationError.createUntrustedAuthorityError(host);\n            }\n\n            _b.label = 3;\n\n          case 3:\n            openIdConfigurationEndpointResponse = this.GetOpenIdConfigurationEndpoint();\n            _a = this;\n            return [4\n            /*yield*/\n            , this.DiscoverEndpoints(openIdConfigurationEndpointResponse, telemetryManager, correlationId)];\n\n          case 4:\n            _a.tenantDiscoveryResponse = _b.sent();\n            return [2\n            /*return*/\n            , this.tenantDiscoveryResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if there is a cached tenant discovery response with required fields.\r\n   */\n\n\n  Authority.prototype.hasCachedMetadata = function () {\n    return !!(this.tenantDiscoveryResponse && this.tenantDiscoveryResponse.AuthorizationEndpoint && this.tenantDiscoveryResponse.EndSessionEndpoint && this.tenantDiscoveryResponse.Issuer);\n  };\n  /**\r\n   * Returns a promise which resolves to the OIDC endpoint\r\n   * Only responds with the endpoint\r\n   */\n\n\n  Authority.prototype.GetOpenIdConfigurationEndpoint = function () {\n    return this.DefaultOpenIdConfigurationEndpoint;\n  };\n\n  return Authority;\n}();\n\nexport { Authority };","map":{"version":3,"sources":["../../src/authority/Authority.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { ClientConfigurationErrorMessage, ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { XhrClient } from \"../XHRClient\";\r\nimport { UrlUtils } from \"../utils/UrlUtils\";\r\nimport { TrustedAuthority } from \"./TrustedAuthority\";\r\nimport { NetworkRequestType, Constants, WELL_KNOWN_SUFFIX } from \"../utils/Constants\";\r\n/**\r\n * @hidden\r\n */\r\nexport var AuthorityType;\r\n(function (AuthorityType) {\r\n    AuthorityType[AuthorityType[\"Default\"] = 0] = \"Default\";\r\n    AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\r\n})(AuthorityType || (AuthorityType = {}));\r\n/**\r\n * @hidden\r\n */\r\nvar Authority = /** @class */ (function () {\r\n    function Authority(authority, validateAuthority, authorityMetadata) {\r\n        this.IsValidationEnabled = validateAuthority;\r\n        this.CanonicalAuthority = authority;\r\n        this.validateAsUri();\r\n        this.tenantDiscoveryResponse = authorityMetadata;\r\n    }\r\n    Authority.isAdfs = function (authorityUrl) {\r\n        var components = UrlUtils.GetUrlComponents(authorityUrl);\r\n        var pathSegments = components.PathSegments;\r\n        return (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS);\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"AuthorityType\", {\r\n        get: function () {\r\n            return Authority.isAdfs(this.canonicalAuthority) ? AuthorityType.Adfs : AuthorityType.Default;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"Tenant\", {\r\n        get: function () {\r\n            return this.CanonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.Issuer.replace(/{tenant}|{tenantid}/g, this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Authority.prototype.validateResolved = function () {\r\n        if (!this.hasCachedMetadata()) {\r\n            throw \"Please call ResolveEndpointsAsync first\";\r\n        }\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\r\n        /**\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthority;\r\n        },\r\n        set: function (url) {\r\n            this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);\r\n            this.canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\r\n        get: function () {\r\n            if (!this.canonicalAuthorityUrlComponents) {\r\n                this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);\r\n            }\r\n            return this.canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\r\n        // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\r\n        get: function () {\r\n            return (this.AuthorityType === AuthorityType.Adfs) ? \"\" + this.CanonicalAuthority + WELL_KNOWN_SUFFIX : this.CanonicalAuthority + \"v2.0/\" + WELL_KNOWN_SUFFIX;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Given a string, validate that it is of the form https://domain/path\r\n     */\r\n    Authority.prototype.validateAsUri = function () {\r\n        var components;\r\n        try {\r\n            components = this.CanonicalAuthorityUrlComponents;\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationErrorMessage.invalidAuthorityType;\r\n        }\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationErrorMessage.authorityUriInsecure;\r\n        }\r\n        if (!components.PathSegments || components.PathSegments.length < 1) {\r\n            throw ClientConfigurationErrorMessage.authorityUriInvalidPath;\r\n        }\r\n    };\r\n    /**\r\n     * Calls the OIDC endpoint and returns the response\r\n     */\r\n    Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint, telemetryManager, correlationId) {\r\n        var client = new XhrClient();\r\n        var httpMethod = NetworkRequestType.GET;\r\n        var httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, openIdConfigurationEndpoint, \"openIdConfigurationEndpoint\");\r\n        return client.sendRequestAsync(openIdConfigurationEndpoint, httpMethod, /* enableCaching: */ true)\r\n            .then(function (response) {\r\n            httpEvent.httpResponseStatus = response.statusCode;\r\n            telemetryManager.stopEvent(httpEvent);\r\n            return {\r\n                AuthorizationEndpoint: response.body.authorization_endpoint,\r\n                EndSessionEndpoint: response.body.end_session_endpoint,\r\n                Issuer: response.body.issuer\r\n            };\r\n        })\r\n            .catch(function (err) {\r\n            httpEvent.serverErrorCode = err;\r\n            telemetryManager.stopEvent(httpEvent);\r\n            throw err;\r\n        });\r\n    };\r\n    /**\r\n     * Returns a promise.\r\n     * Checks to see if the authority is in the cache\r\n     * Discover endpoints via openid-configuration\r\n     * If successful, caches the endpoint for later use in OIDC\r\n     */\r\n    Authority.prototype.resolveEndpointsAsync = function (telemetryManager, correlationId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var host, openIdConfigurationEndpointResponse, _a;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (!this.IsValidationEnabled) return [3 /*break*/, 3];\r\n                        host = this.canonicalAuthorityUrlComponents.HostNameAndPort;\r\n                        if (!(TrustedAuthority.getTrustedHostList().length === 0)) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, TrustedAuthority.setTrustedAuthoritiesFromNetwork(this.canonicalAuthority, telemetryManager, correlationId)];\r\n                    case 1:\r\n                        _b.sent();\r\n                        _b.label = 2;\r\n                    case 2:\r\n                        if (!TrustedAuthority.IsInTrustedHostList(host)) {\r\n                            throw ClientConfigurationError.createUntrustedAuthorityError(host);\r\n                        }\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        openIdConfigurationEndpointResponse = this.GetOpenIdConfigurationEndpoint();\r\n                        _a = this;\r\n                        return [4 /*yield*/, this.DiscoverEndpoints(openIdConfigurationEndpointResponse, telemetryManager, correlationId)];\r\n                    case 4:\r\n                        _a.tenantDiscoveryResponse = _b.sent();\r\n                        return [2 /*return*/, this.tenantDiscoveryResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Checks if there is a cached tenant discovery response with required fields.\r\n     */\r\n    Authority.prototype.hasCachedMetadata = function () {\r\n        return !!(this.tenantDiscoveryResponse &&\r\n            this.tenantDiscoveryResponse.AuthorizationEndpoint &&\r\n            this.tenantDiscoveryResponse.EndSessionEndpoint &&\r\n            this.tenantDiscoveryResponse.Issuer);\r\n    };\r\n    /**\r\n     * Returns a promise which resolves to the OIDC endpoint\r\n     * Only responds with the endpoint\r\n     */\r\n    Authority.prototype.GetOpenIdConfigurationEndpoint = function () {\r\n        return this.DefaultOpenIdConfigurationEndpoint;\r\n    };\r\n    return Authority;\r\n}());\r\nexport { Authority };\r\n//# sourceMappingURL=Authority.js.map"]},"metadata":{},"sourceType":"module"}