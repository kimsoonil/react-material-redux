{"ast":null,"code":"// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users')) || []; // eslint-disable-next-line import/prefer-default-export\n\nexport function configureFakeBackend() {\n  const realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    const {\n      method,\n      headers\n    } = opts;\n    const body = opts.body && JSON.parse(opts.body);\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(handleRoute, 500);\n\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/users/authenticate') && method === 'POST':\n            return authenticate();\n\n          case url.endsWith('/users/register') && method === 'POST':\n            return register();\n\n          case url.endsWith('/users') && method === 'GET':\n            return getUsers();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n            return deleteUser();\n\n          default:\n            // pass through any requests not handled above\n            return realFetch(url, opts).then(response => resolve(response)).catch(error => reject(error));\n        }\n      } // route functions\n\n\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const user = users.find(x => x.email === email && x.password === password);\n        if (!user) return error('email or password is incorrect');\n        return ok({\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          token: 'fake-jwt-token'\n        });\n      }\n\n      function register() {\n        const user = body;\n\n        if (users.find(x => x.email === user.email)) {\n          return error(`email  ${user.email} is already taken`);\n        } // assign user id and a few other properties then save\n\n\n        user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n        users.push(user);\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n\n      function getUsers() {\n        if (!isLoggedIn()) return unauthorized();\n        return ok(users);\n      }\n\n      function deleteUser() {\n        if (!isLoggedIn()) return unauthorized();\n        users = users.filter(x => x.id !== idFromUrl());\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      } // helper functions\n\n\n      function ok(body) {\n        resolve({\n          ok: true,\n          text: () => Promise.resolve(JSON.stringify(body))\n        });\n      }\n\n      function unauthorized() {\n        resolve({\n          status: 401,\n          text: () => Promise.resolve(JSON.stringify({\n            message: 'Unauthorized'\n          }))\n        });\n      }\n\n      function error(message) {\n        resolve({\n          status: 400,\n          text: () => Promise.resolve(JSON.stringify({\n            message\n          }))\n        });\n      }\n\n      function isLoggedIn() {\n        return headers['Authorization'] === 'Bearer fake-jwt-token';\n      }\n\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/sunil.kim/Desktop/workspace/react-material-dashboard/src/helpers/fake-backend.js"],"names":["users","JSON","parse","localStorage","getItem","configureFakeBackend","realFetch","window","fetch","url","opts","method","headers","body","Promise","resolve","reject","setTimeout","handleRoute","endsWith","authenticate","register","getUsers","match","deleteUser","then","response","catch","error","email","password","user","find","x","ok","id","name","token","length","Math","max","map","push","setItem","stringify","isLoggedIn","unauthorized","filter","idFromUrl","text","status","message","urlParts","split","parseInt"],"mappings":"AAAA;AACA,IAAIA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,EAAzD,C,CAEA;;AACA,OAAO,SAASC,oBAAT,GAAgC;AACrC,QAAMC,SAAS,GAAGC,MAAM,CAACC,KAAzB;;AACAD,EAAAA,MAAM,CAACC,KAAP,GAAe,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAClC,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAsBF,IAA5B;AACA,UAAMG,IAAI,GAAGH,IAAI,CAACG,IAAL,IAAaZ,IAAI,CAACC,KAAL,CAAWQ,IAAI,CAACG,IAAhB,CAA1B;AAEA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACAC,MAAAA,UAAU,CAACC,WAAD,EAAc,GAAd,CAAV;;AAEA,eAASA,WAAT,GAAuB;AACrB,gBAAQ,IAAR;AACE,eAAKT,GAAG,CAACU,QAAJ,CAAa,qBAAb,KAAuCR,MAAM,KAAK,MAAvD;AACE,mBAAOS,YAAY,EAAnB;;AACJ,eAAKX,GAAG,CAACU,QAAJ,CAAa,iBAAb,KAAmCR,MAAM,KAAK,MAAnD;AACI,mBAAOU,QAAQ,EAAf;;AACJ,eAAKZ,GAAG,CAACU,QAAJ,CAAa,QAAb,KAA0BR,MAAM,KAAK,KAA1C;AACI,mBAAOW,QAAQ,EAAf;;AACJ,eAAKb,GAAG,CAACc,KAAJ,CAAU,eAAV,KAA8BZ,MAAM,KAAK,QAA9C;AACI,mBAAOa,UAAU,EAAjB;;AACJ;AACI;AACA,mBAAOlB,SAAS,CAACG,GAAD,EAAMC,IAAN,CAAT,CACFe,IADE,CACGC,QAAQ,IAAIX,OAAO,CAACW,QAAD,CADtB,EAEFC,KAFE,CAEIC,KAAK,IAAIZ,MAAM,CAACY,KAAD,CAFnB,CAAP;AAXJ;AAeD,OApBqC,CAsBtC;;;AAEA,eAASR,YAAT,GAAwB;AACtB,cAAM;AAAES,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAsBjB,IAA5B;AACA,cAAMkB,IAAI,GAAG/B,KAAK,CAACgC,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACJ,KAAF,KAAYA,KAAZ,IAAqBI,CAAC,CAACH,QAAF,KAAeA,QAAtD,CAAb;AACA,YAAI,CAACC,IAAL,EAAW,OAAOH,KAAK,CAAC,gCAAD,CAAZ;AACX,eAAOM,EAAE,CAAC;AACRC,UAAAA,EAAE,EAAEJ,IAAI,CAACI,EADD;AAERN,UAAAA,KAAK,EAAEE,IAAI,CAACF,KAFJ;AAGRO,UAAAA,IAAI,EAAEL,IAAI,CAACK,IAHH;AAIRC,UAAAA,KAAK,EAAE;AAJC,SAAD,CAAT;AAMD;;AAED,eAAShB,QAAT,GAAoB;AAClB,cAAMU,IAAI,GAAGlB,IAAb;;AAEA,YAAIb,KAAK,CAACgC,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACJ,KAAF,KAAYE,IAAI,CAACF,KAAnC,CAAJ,EAA+C;AAC7C,iBAAOD,KAAK,CAAE,UAASG,IAAI,CAACF,KAAM,mBAAtB,CAAZ;AACD,SALiB,CAOlB;;;AACAE,QAAAA,IAAI,CAACI,EAAL,GAAUnC,KAAK,CAACsC,MAAN,GAAeC,IAAI,CAACC,GAAL,CAAS,GAAGxC,KAAK,CAACyC,GAAN,CAAWR,CAAD,IAAOA,CAAC,CAACE,EAAnB,CAAZ,IAAsC,CAArD,GAAyD,CAAnE;AACAnC,QAAAA,KAAK,CAAC0C,IAAN,CAAWX,IAAX;AACA5B,QAAAA,YAAY,CAACwC,OAAb,CAAqB,OAArB,EAA8B1C,IAAI,CAAC2C,SAAL,CAAe5C,KAAf,CAA9B;AAEA,eAAOkC,EAAE,EAAT;AACD;;AAED,eAASZ,QAAT,GAAoB;AAClB,YAAI,CAACuB,UAAU,EAAf,EAAmB,OAAOC,YAAY,EAAnB;AAEnB,eAAOZ,EAAE,CAAClC,KAAD,CAAT;AACD;;AAED,eAASwB,UAAT,GAAsB;AACpB,YAAI,CAACqB,UAAU,EAAf,EAAmB,OAAOC,YAAY,EAAnB;AAEnB9C,QAAAA,KAAK,GAAGA,KAAK,CAAC+C,MAAN,CAAcd,CAAD,IAAOA,CAAC,CAACE,EAAF,KAASa,SAAS,EAAtC,CAAR;AACA7C,QAAAA,YAAY,CAACwC,OAAb,CAAqB,OAArB,EAA8B1C,IAAI,CAAC2C,SAAL,CAAe5C,KAAf,CAA9B;AACA,eAAOkC,EAAE,EAAT;AACD,OA/DqC,CAiEtC;;;AAEA,eAASA,EAAT,CAAYrB,IAAZ,EAAkB;AAChBE,QAAAA,OAAO,CAAC;AAAEmB,UAAAA,EAAE,EAAE,IAAN;AAAYe,UAAAA,IAAI,EAAE,MAAMnC,OAAO,CAACC,OAAR,CAAgBd,IAAI,CAAC2C,SAAL,CAAe/B,IAAf,CAAhB;AAAxB,SAAD,CAAP;AACD;;AAED,eAASiC,YAAT,GAAwB;AACtB/B,QAAAA,OAAO,CAAC;AAAEmC,UAAAA,MAAM,EAAE,GAAV;AAAeD,UAAAA,IAAI,EAAE,MAAMnC,OAAO,CAACC,OAAR,CAAgBd,IAAI,CAAC2C,SAAL,CAAe;AAAEO,YAAAA,OAAO,EAAE;AAAX,WAAf,CAAhB;AAA3B,SAAD,CAAP;AACD;;AAED,eAASvB,KAAT,CAAeuB,OAAf,EAAwB;AACtBpC,QAAAA,OAAO,CAAC;AAAEmC,UAAAA,MAAM,EAAE,GAAV;AAAeD,UAAAA,IAAI,EAAE,MAAMnC,OAAO,CAACC,OAAR,CAAgBd,IAAI,CAAC2C,SAAL,CAAe;AAAEO,YAAAA;AAAF,WAAf,CAAhB;AAA3B,SAAD,CAAP;AACD;;AAED,eAASN,UAAT,GAAsB;AACpB,eAAOjC,OAAO,CAAC,eAAD,CAAP,KAA6B,uBAApC;AACD;;AAED,eAASoC,SAAT,GAAqB;AACnB,cAAMI,QAAQ,GAAG3C,GAAG,CAAC4C,KAAJ,CAAU,GAAV,CAAjB;AACA,eAAOC,QAAQ,CAACF,QAAQ,CAACA,QAAQ,CAACd,MAAT,GAAkB,CAAnB,CAAT,CAAf;AACD;AACF,KAvFM,CAAP;AAwFD,GA5FD;AA6FD","sourcesContent":["// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users')) || [];\n\n// eslint-disable-next-line import/prefer-default-export\nexport function configureFakeBackend() {\n  const realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    const { method, headers } = opts;\n    const body = opts.body && JSON.parse(opts.body);\n\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(handleRoute, 500);\n\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/users/authenticate') && method === 'POST':\n            return authenticate();\n        case url.endsWith('/users/register') && method === 'POST':\n            return register();\n        case url.endsWith('/users') && method === 'GET':\n            return getUsers();\n        case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n            return deleteUser();\n        default:\n            // pass through any requests not handled above\n            return realFetch(url, opts)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        }\n      }\n\n      // route functions\n\n      function authenticate() {\n        const { email, password } = body;\n        const user = users.find((x) => x.email === email && x.password === password);\n        if (!user) return error('email or password is incorrect');\n        return ok({\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          token: 'fake-jwt-token'\n        });\n      }\n\n      function register() {\n        const user = body;\n\n        if (users.find((x) => x.email === user.email)) {\n          return error(`email  ${user.email} is already taken`);\n        }\n\n        // assign user id and a few other properties then save\n        user.id = users.length ? Math.max(...users.map((x) => x.id)) + 1 : 1;\n        users.push(user);\n        localStorage.setItem('users', JSON.stringify(users));\n\n        return ok();\n      }\n\n      function getUsers() {\n        if (!isLoggedIn()) return unauthorized();\n\n        return ok(users);\n      }\n\n      function deleteUser() {\n        if (!isLoggedIn()) return unauthorized();\n    \n        users = users.filter((x) => x.id !== idFromUrl());\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n\n      // helper functions\n\n      function ok(body) {\n        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) });\n      }\n\n      function unauthorized() {\n        resolve({ status: 401, text: () => Promise.resolve(JSON.stringify({ message: 'Unauthorized' })) });\n      }\n\n      function error(message) {\n        resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) });\n      }\n\n      function isLoggedIn() {\n        return headers['Authorization'] === 'Bearer fake-jwt-token';\n      }\n    \n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}