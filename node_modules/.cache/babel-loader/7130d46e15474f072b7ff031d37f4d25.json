{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport { TENANT_PLACEHOLDER, EVENT_NAME_PREFIX } from \"./TelemetryConstants\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nimport { Authority } from \"../authority/Authority\";\nexport var scrubTenantFromUri = function (uri) {\n  var url = UrlUtils.GetUrlComponents(uri); // validate trusted host\n\n  if (Authority.isAdfs(uri)) {\n    /**\r\n     * returning what was passed because the library needs to work with uris that are non\r\n     * AAD trusted but passed by users such as B2C or others.\r\n     * HTTP Events for instance can take a url to the open id config endpoint\r\n     */\n    return uri;\n  }\n\n  var pathParams = url.PathSegments;\n\n  if (pathParams && pathParams.length >= 2) {\n    var tenantPosition = pathParams[1] === \"tfp\" ? 2 : 1;\n\n    if (tenantPosition < pathParams.length) {\n      pathParams[tenantPosition] = TENANT_PLACEHOLDER;\n    }\n  }\n\n  return url.Protocol + \"//\" + url.HostNameAndPort + \"/\" + pathParams.join(\"/\");\n};\nexport var hashPersonalIdentifier = function (valueToHash) {\n  /*\r\n   * TODO sha256 this\r\n   * Current test runner is being funny with node libs that are webpacked anyway\r\n   * need a different solution\r\n   */\n  return CryptoUtils.base64Encode(valueToHash);\n};\nexport var prependEventNamePrefix = function (suffix) {\n  return \"\" + EVENT_NAME_PREFIX + (suffix || \"\");\n};\nexport var supportsBrowserPerformance = function () {\n  return !!(typeof window !== \"undefined\" && \"performance\" in window && window.performance.mark && window.performance.measure);\n};\nexport var endBrowserPerformanceMeasurement = function (measureName, startMark, endMark) {\n  if (supportsBrowserPerformance()) {\n    window.performance.mark(endMark);\n    window.performance.measure(measureName, startMark, endMark);\n    window.performance.clearMeasures(measureName);\n    window.performance.clearMarks(startMark);\n    window.performance.clearMarks(endMark);\n  }\n};\nexport var startBrowserPerformanceMeasurement = function (startMark) {\n  if (supportsBrowserPerformance()) {\n    window.performance.mark(startMark);\n  }\n};","map":{"version":3,"sources":["../../src/telemetry/TelemetryUtils.ts"],"names":[],"mappings":"AAAA;;;AAGG;AAEH,SAAS,kBAAT,EAA6B,iBAA7B,QAAsD,sBAAtD;AACA,SAAS,WAAT,QAA4B,sBAA5B;AACA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,SAAT,QAA0B,wBAA1B;AAEA,OAAO,IAAM,kBAAkB,GAAG,UAAC,GAAD,EAAY;AAE1C,MAAM,GAAG,GAAG,QAAQ,CAAC,gBAAT,CAA0B,GAA1B,CAAZ,CAF0C,CAI1C;;AACA,MAAI,SAAS,CAAC,MAAV,CAAiB,GAAjB,CAAJ,EAA2B;AACvB;;;;AAIG;AACH,WAAO,GAAP;AACH;;AAED,MAAM,UAAU,GAAG,GAAG,CAAC,YAAvB;;AAEA,MAAI,UAAU,IAAI,UAAU,CAAC,MAAX,IAAqB,CAAvC,EAA0C;AACtC,QAAM,cAAc,GAAG,UAAU,CAAC,CAAD,CAAV,KAAmB,KAAnB,GAA2B,CAA3B,GAA+B,CAAtD;;AACA,QAAI,cAAc,GAAG,UAAU,CAAC,MAAhC,EAAwC;AACpC,MAAA,UAAU,CAAC,cAAD,CAAV,GAA6B,kBAA7B;AACH;AACJ;;AAED,SAAW,GAAG,CAAC,QAAJ,GAAY,IAAZ,GAAiB,GAAG,CAAC,eAArB,GAAoC,GAApC,GAAwC,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAnD;AACH,CAxBM;AA0BP,OAAO,IAAM,sBAAsB,GAAG,UAAC,WAAD,EAAoB;AACtD;;;;AAIG;AACH,SAAO,WAAW,CAAC,YAAZ,CAAyB,WAAzB,CAAP;AACH,CAPM;AASP,OAAO,IAAM,sBAAsB,GAAG,UAAC,MAAD,EAAe;AAAa,SAAA,KAAG,iBAAH,IAAuB,MAAM,IAA7B,EAAA,CAAA;AAAqC,CAAhG;AAEP,OAAO,IAAM,0BAA0B,GAAG,YAAA;AAAe,SAAA,CAAC,EACtD,OAAO,MAAP,KAAkB,WAAlB,IACI,iBAAiB,MADrB,IAEI,MAAM,CAAC,WAAP,CAAmB,IAFvB,IAGI,MAAM,CAAC,WAAP,CAJiD,OAAC,CAAD;AAKxD,CALM;AAOP,OAAO,IAAM,gCAAgC,GAAG,UAAC,WAAD,EAAsB,SAAtB,EAAyC,OAAzC,EAAwD;AACpG,MAAI,0BAA0B,EAA9B,EAAkC;AAC9B,IAAA,MAAM,CAAC,WAAP,CAAmB,IAAnB,CAAwB,OAAxB;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,OAAnB,CAA2B,WAA3B,EAAwC,SAAxC,EAAmD,OAAnD;AAEA,IAAA,MAAM,CAAC,WAAP,CAAmB,aAAnB,CAAiC,WAAjC;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,UAAnB,CAA8B,SAA9B;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,UAAnB,CAA8B,OAA9B;AACH;AACJ,CATM;AAWP,OAAO,IAAM,kCAAkC,GAAG,UAAC,SAAD,EAAkB;AAChE,MAAI,0BAA0B,EAA9B,EAAkC;AAC9B,IAAA,MAAM,CAAC,WAAP,CAAmB,IAAnB,CAAwB,SAAxB;AACH;AACJ,CAJM","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { TENANT_PLACEHOLDER, EVENT_NAME_PREFIX } from \"./TelemetryConstants\";\r\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\r\nimport { UrlUtils } from \"../utils/UrlUtils\";\r\nimport { Authority } from \"../authority/Authority\";\r\nexport var scrubTenantFromUri = function (uri) {\r\n    var url = UrlUtils.GetUrlComponents(uri);\r\n    // validate trusted host\r\n    if (Authority.isAdfs(uri)) {\r\n        /**\r\n         * returning what was passed because the library needs to work with uris that are non\r\n         * AAD trusted but passed by users such as B2C or others.\r\n         * HTTP Events for instance can take a url to the open id config endpoint\r\n         */\r\n        return uri;\r\n    }\r\n    var pathParams = url.PathSegments;\r\n    if (pathParams && pathParams.length >= 2) {\r\n        var tenantPosition = pathParams[1] === \"tfp\" ? 2 : 1;\r\n        if (tenantPosition < pathParams.length) {\r\n            pathParams[tenantPosition] = TENANT_PLACEHOLDER;\r\n        }\r\n    }\r\n    return url.Protocol + \"//\" + url.HostNameAndPort + \"/\" + pathParams.join(\"/\");\r\n};\r\nexport var hashPersonalIdentifier = function (valueToHash) {\r\n    /*\r\n     * TODO sha256 this\r\n     * Current test runner is being funny with node libs that are webpacked anyway\r\n     * need a different solution\r\n     */\r\n    return CryptoUtils.base64Encode(valueToHash);\r\n};\r\nexport var prependEventNamePrefix = function (suffix) { return \"\" + EVENT_NAME_PREFIX + (suffix || \"\"); };\r\nexport var supportsBrowserPerformance = function () { return !!(typeof window !== \"undefined\" &&\r\n    \"performance\" in window &&\r\n    window.performance.mark &&\r\n    window.performance.measure); };\r\nexport var endBrowserPerformanceMeasurement = function (measureName, startMark, endMark) {\r\n    if (supportsBrowserPerformance()) {\r\n        window.performance.mark(endMark);\r\n        window.performance.measure(measureName, startMark, endMark);\r\n        window.performance.clearMeasures(measureName);\r\n        window.performance.clearMarks(startMark);\r\n        window.performance.clearMarks(endMark);\r\n    }\r\n};\r\nexport var startBrowserPerformanceMeasurement = function (startMark) {\r\n    if (supportsBrowserPerformance()) {\r\n        window.performance.mark(startMark);\r\n    }\r\n};\r\n//# sourceMappingURL=TelemetryUtils.js.map"]},"metadata":{},"sourceType":"module"}