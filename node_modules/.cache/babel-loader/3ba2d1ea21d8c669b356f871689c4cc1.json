{"ast":null,"code":"import { authHeader } from '../helpers';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: userDelete\n};\n\nfunction login(email, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  };\n  return fetch('/users/authenticate', requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction userDelete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); //location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/sunil.kim/Desktop/workspace/react-material-redux/src/services/user.service.js"],"names":["authHeader","userService","login","logout","register","getAll","getById","update","delete","userDelete","email","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","localStorage","setItem","removeItem","id","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { authHeader } from '../helpers';\n\nexport const userService = {\n    login,\n    logout,\n    register,\n    getAll,\n    getById,\n    update,\n    delete: userDelete\n};\n\nfunction login(email, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password })\n  };\n\n  return fetch('/users/authenticate', requestOptions)\n    .then(handleResponse)\n    .then((user) => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user));\n\n      return user;\n    });\n}\n\nfunction logout() {\n// remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n\n  return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(user)\n  };\n\n  return fetch(`/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    body: JSON.stringify(user)\n  };\n\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction userDelete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then((text) => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        //location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}