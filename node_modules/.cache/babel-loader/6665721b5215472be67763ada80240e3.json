{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\r\n * accountIdentifier       combination of idToken.uid and idToken.utid\r\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\r\n * userName                idToken.preferred_username\r\n * name                    idToken.name\r\n * idToken                 idToken\r\n * sid                     idToken.sid - session identifier\r\n * environment             idtoken.issuer (the authority that issues the token)\r\n */\n\nvar Account =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an Account Object\r\n   * @praram accountIdentifier\r\n   * @param homeAccountIdentifier\r\n   * @param userName\r\n   * @param name\r\n   * @param idToken\r\n   * @param sid\r\n   * @param environment\r\n   */\n  function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {\n    this.accountIdentifier = accountIdentifier;\n    this.homeAccountIdentifier = homeAccountIdentifier;\n    this.userName = userName;\n    this.name = name; // will be deprecated soon\n\n    this.idToken = idTokenClaims;\n    this.idTokenClaims = idTokenClaims;\n    this.sid = sid;\n    this.environment = environment;\n  }\n  /**\r\n   * @hidden\r\n   * @param idToken\r\n   * @param clientInfo\r\n   */\n\n\n  Account.createAccount = function (idToken, clientInfo) {\n    // create accountIdentifier\n    var accountIdentifier = idToken.objectId || idToken.subject; // create homeAccountIdentifier\n\n    var uid = clientInfo ? clientInfo.uid : \"\";\n    var utid = clientInfo ? clientInfo.utid : \"\";\n    var homeAccountIdentifier;\n\n    if (!StringUtils.isEmpty(uid)) {\n      homeAccountIdentifier = StringUtils.isEmpty(utid) ? CryptoUtils.base64Encode(uid) : CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils.base64Encode(utid);\n    }\n\n    return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);\n  };\n  /**\r\n   * Utils function to compare two Account objects - used to check if the same user account is logged in\r\n   *\r\n   * @param a1: Account object\r\n   * @param a2: Account object\r\n   */\n\n\n  Account.compareAccounts = function (a1, a2) {\n    if (!a1 || !a2) {\n      return false;\n    }\n\n    if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {\n      if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return Account;\n}();\n\nexport { Account };","map":{"version":3,"sources":["../src/Account.ts"],"names":[],"mappings":"AAAA;;;AAGG;AAIH,SAAS,WAAT,QAA4B,qBAA5B;AACA,SAAS,WAAT,QAA4B,qBAA5B;AAGA;;;;;;;;AAQG;;AACH,IAAA,OAAA;AAAA;AAAA,YAAA;AAWI;;;;;;;;;AASG;AACH,WAAA,OAAA,CAAY,iBAAZ,EAAuC,qBAAvC,EAAsE,QAAtE,EAAwF,IAAxF,EAAsG,aAAtG,EAAiI,GAAjI,EAA+I,WAA/I,EAAkK;AAC9J,SAAK,iBAAL,GAAyB,iBAAzB;AACA,SAAK,qBAAL,GAA6B,qBAA7B;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,IAAL,GAAY,IAAZ,CAJ8J,CAK9J;;AACA,SAAK,OAAL,GAAe,aAAf;AACA,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,WAAL,GAAmB,WAAnB;AACH;AAED;;;;AAIG;;;AACI,EAAA,OAAA,CAAA,aAAA,GAAP,UAAqB,OAArB,EAAuC,UAAvC,EAA6D;AAEzD;AACA,QAAM,iBAAiB,GAAW,OAAO,CAAC,QAAR,IAAqB,OAAO,CAAC,OAA/D,CAHyD,CAKzD;;AACA,QAAM,GAAG,GAAW,UAAU,GAAG,UAAU,CAAC,GAAd,GAAoB,EAAlD;AACA,QAAM,IAAI,GAAW,UAAU,GAAG,UAAU,CAAC,IAAd,GAAqB,EAApD;AAEA,QAAI,qBAAJ;;AACA,QAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAL,EAA+B;AAC3B,MAAA,qBAAqB,GAAG,WAAW,CAAC,OAAZ,CAAoB,IAApB,IAA2B,WAAW,CAAC,YAAZ,CAAyB,GAAzB,CAA3B,GAA0D,WAAW,CAAC,YAAZ,CAAyB,GAAzB,IAAgC,GAAhC,GAAsC,WAAW,CAAC,YAAZ,CAAyB,IAAzB,CAAxH;AACH;;AACD,WAAO,IAAI,OAAJ,CAAY,iBAAZ,EAA+B,qBAA/B,EAAsD,OAAO,CAAC,aAA9D,EAA6E,OAAO,CAAC,IAArF,EAA2F,OAAO,CAAC,MAAnG,EAA2G,OAAO,CAAC,GAAnH,EAAwH,OAAO,CAAC,MAAhI,CAAP;AACH,GAdM;AAgBP;;;;;AAKG;;;AACI,EAAA,OAAA,CAAA,eAAA,GAAP,UAAuB,EAAvB,EAAoC,EAApC,EAA+C;AAC3C,QAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB;AACZ,aAAO,KAAP;AACH;;AACD,QAAI,EAAE,CAAC,qBAAH,IAA4B,EAAE,CAAC,qBAAnC,EAA0D;AACtD,UAAI,EAAE,CAAC,qBAAH,KAA6B,EAAE,CAAC,qBAApC,EAA2D;AACvD,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAVM;;AAWX,SAAA,OAAA;AAAC,CAvED,EAAA","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\r\nimport { StringUtils } from \"./utils/StringUtils\";\r\n/**\r\n * accountIdentifier       combination of idToken.uid and idToken.utid\r\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\r\n * userName                idToken.preferred_username\r\n * name                    idToken.name\r\n * idToken                 idToken\r\n * sid                     idToken.sid - session identifier\r\n * environment             idtoken.issuer (the authority that issues the token)\r\n */\r\nvar Account = /** @class */ (function () {\r\n    /**\r\n     * Creates an Account Object\r\n     * @praram accountIdentifier\r\n     * @param homeAccountIdentifier\r\n     * @param userName\r\n     * @param name\r\n     * @param idToken\r\n     * @param sid\r\n     * @param environment\r\n     */\r\n    function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {\r\n        this.accountIdentifier = accountIdentifier;\r\n        this.homeAccountIdentifier = homeAccountIdentifier;\r\n        this.userName = userName;\r\n        this.name = name;\r\n        // will be deprecated soon\r\n        this.idToken = idTokenClaims;\r\n        this.idTokenClaims = idTokenClaims;\r\n        this.sid = sid;\r\n        this.environment = environment;\r\n    }\r\n    /**\r\n     * @hidden\r\n     * @param idToken\r\n     * @param clientInfo\r\n     */\r\n    Account.createAccount = function (idToken, clientInfo) {\r\n        // create accountIdentifier\r\n        var accountIdentifier = idToken.objectId || idToken.subject;\r\n        // create homeAccountIdentifier\r\n        var uid = clientInfo ? clientInfo.uid : \"\";\r\n        var utid = clientInfo ? clientInfo.utid : \"\";\r\n        var homeAccountIdentifier;\r\n        if (!StringUtils.isEmpty(uid)) {\r\n            homeAccountIdentifier = StringUtils.isEmpty(utid) ? CryptoUtils.base64Encode(uid) : CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils.base64Encode(utid);\r\n        }\r\n        return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);\r\n    };\r\n    /**\r\n     * Utils function to compare two Account objects - used to check if the same user account is logged in\r\n     *\r\n     * @param a1: Account object\r\n     * @param a2: Account object\r\n     */\r\n    Account.compareAccounts = function (a1, a2) {\r\n        if (!a1 || !a2) {\r\n            return false;\r\n        }\r\n        if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {\r\n            if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return Account;\r\n}());\r\nexport { Account };\r\n//# sourceMappingURL=Account.js.map"]},"metadata":{},"sourceType":"module"}