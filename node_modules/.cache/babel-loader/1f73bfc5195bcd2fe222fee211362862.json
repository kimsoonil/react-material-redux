{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * @hidden\r\n */\nvar CryptoUtils =\n/** @class */\nfunction () {\n  function CryptoUtils() {}\n  /**\r\n   * Creates a new random GUID\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoUtils.createNewGuid = function () {\n    /*\r\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n     * pseudo-random numbers.\r\n     * The algorithm is as follows:\r\n     *     Set the two most significant bits (bits 6 and 7) of the\r\n     *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n     *     Set the four most significant bits (bits 12 through 15) of the\r\n     *        time_hi_and_version field to the 4-bit version number from\r\n     *        Section 4.1.3. Version4\r\n     *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n     *     values.\r\n     * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n     * time-low               = 4hexOctet\r\n     * time-mid               = 2hexOctet\r\n     * time-high-and-version  = 2hexOctet\r\n     * clock-seq-and-reserved = hexOctet:\r\n     * clock-seq-low          = hexOctet\r\n     * node                   = 6hexOctet\r\n     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n     * y values are 8, 9, A, B\r\n     */\n    var cryptoObj = window.crypto; // for IE 11\n\n    if (cryptoObj && cryptoObj.getRandomValues) {\n      var buffer = new Uint8Array(16);\n      cryptoObj.getRandomValues(buffer); // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n\n      buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\n\n      buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n      // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n\n      buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\n\n      buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\n\n      return CryptoUtils.decimalToHex(buffer[0]) + CryptoUtils.decimalToHex(buffer[1]) + CryptoUtils.decimalToHex(buffer[2]) + CryptoUtils.decimalToHex(buffer[3]) + \"-\" + CryptoUtils.decimalToHex(buffer[4]) + CryptoUtils.decimalToHex(buffer[5]) + \"-\" + CryptoUtils.decimalToHex(buffer[6]) + CryptoUtils.decimalToHex(buffer[7]) + \"-\" + CryptoUtils.decimalToHex(buffer[8]) + CryptoUtils.decimalToHex(buffer[9]) + \"-\" + CryptoUtils.decimalToHex(buffer[10]) + CryptoUtils.decimalToHex(buffer[11]) + CryptoUtils.decimalToHex(buffer[12]) + CryptoUtils.decimalToHex(buffer[13]) + CryptoUtils.decimalToHex(buffer[14]) + CryptoUtils.decimalToHex(buffer[15]);\n    } else {\n      var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n      var hex = \"0123456789abcdef\";\n      var r = 0;\n      var guidResponse = \"\";\n\n      for (var i = 0; i < 36; i++) {\n        if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n          // each x and y needs to be random\n          r = Math.random() * 16 | 0;\n        }\n\n        if (guidHolder[i] === \"x\") {\n          guidResponse += hex[r];\n        } else if (guidHolder[i] === \"y\") {\n          // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n          r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n\n          r |= 0x8; // set pos 3 to 1 as 1???\n\n          guidResponse += hex[r];\n        } else {\n          guidResponse += guidHolder[i];\n        }\n      }\n\n      return guidResponse;\n    }\n  };\n  /**\r\n   * verifies if a string is  GUID\r\n   * @param guid\r\n   */\n\n\n  CryptoUtils.isGuid = function (guid) {\n    var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return regexGuid.test(guid);\n  };\n  /**\r\n   * Decimal to Hex\r\n   *\r\n   * @param num\r\n   */\n\n\n  CryptoUtils.decimalToHex = function (num) {\n    var hex = num.toString(16);\n\n    while (hex.length < 2) {\n      hex = \"0\" + hex;\n    }\n\n    return hex;\n  }; // See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_4_%E2%80%93_escaping_the_string_before_encoding_it\n\n  /**\r\n   * encoding string to base64 - platform specific check\r\n   *\r\n   * @param input\r\n   */\n\n\n  CryptoUtils.base64Encode = function (input) {\n    return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {\n      return String.fromCharCode(Number(\"0x\" + p1));\n    }));\n  };\n  /**\r\n   * Decodes a base64 encoded string.\r\n   *\r\n   * @param input\r\n   */\n\n\n  CryptoUtils.base64Decode = function (input) {\n    var encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n    switch (encodedString.length % 4) {\n      case 0:\n        break;\n\n      case 2:\n        encodedString += \"==\";\n        break;\n\n      case 3:\n        encodedString += \"=\";\n        break;\n\n      default:\n        throw new Error(\"Invalid base64 string\");\n    }\n\n    return decodeURIComponent(atob(encodedString).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n  };\n  /**\r\n   * deserialize a string\r\n   *\r\n   * @param query\r\n   */\n\n\n  CryptoUtils.deserialize = function (query) {\n    var match; // Regex for replacing addition symbol with a space\n\n    var pl = /\\+/g;\n    var search = /([^&=]+)=([^&]*)/g;\n\n    var decode = function (s) {\n      return decodeURIComponent(s.replace(pl, \" \"));\n    };\n\n    var obj = {};\n    match = search.exec(query);\n\n    while (match) {\n      obj[decode(match[1])] = decode(match[2]);\n      match = search.exec(query);\n    }\n\n    return obj;\n  };\n\n  return CryptoUtils;\n}();\n\nexport { CryptoUtils };","map":{"version":3,"sources":["../../src/utils/CryptoUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nvar CryptoUtils = /** @class */ (function () {\r\n    function CryptoUtils() {\r\n    }\r\n    /**\r\n     * Creates a new random GUID\r\n     * @returns string (GUID)\r\n     */\r\n    CryptoUtils.createNewGuid = function () {\r\n        /*\r\n         * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n         * pseudo-random numbers.\r\n         * The algorithm is as follows:\r\n         *     Set the two most significant bits (bits 6 and 7) of the\r\n         *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n         *     Set the four most significant bits (bits 12 through 15) of the\r\n         *        time_hi_and_version field to the 4-bit version number from\r\n         *        Section 4.1.3. Version4\r\n         *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n         *     values.\r\n         * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n         * time-low               = 4hexOctet\r\n         * time-mid               = 2hexOctet\r\n         * time-high-and-version  = 2hexOctet\r\n         * clock-seq-and-reserved = hexOctet:\r\n         * clock-seq-low          = hexOctet\r\n         * node                   = 6hexOctet\r\n         * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n         * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n         * y values are 8, 9, A, B\r\n         */\r\n        var cryptoObj = window.crypto; // for IE 11\r\n        if (cryptoObj && cryptoObj.getRandomValues) {\r\n            var buffer = new Uint8Array(16);\r\n            cryptoObj.getRandomValues(buffer);\r\n            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\r\n            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\r\n            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\r\n            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\r\n            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\r\n            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\r\n            return CryptoUtils.decimalToHex(buffer[0]) + CryptoUtils.decimalToHex(buffer[1])\r\n                + CryptoUtils.decimalToHex(buffer[2]) + CryptoUtils.decimalToHex(buffer[3])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[4]) + CryptoUtils.decimalToHex(buffer[5])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[6]) + CryptoUtils.decimalToHex(buffer[7])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[8]) + CryptoUtils.decimalToHex(buffer[9])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[10]) + CryptoUtils.decimalToHex(buffer[11])\r\n                + CryptoUtils.decimalToHex(buffer[12]) + CryptoUtils.decimalToHex(buffer[13])\r\n                + CryptoUtils.decimalToHex(buffer[14]) + CryptoUtils.decimalToHex(buffer[15]);\r\n        }\r\n        else {\r\n            var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\r\n            var hex = \"0123456789abcdef\";\r\n            var r = 0;\r\n            var guidResponse = \"\";\r\n            for (var i = 0; i < 36; i++) {\r\n                if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\r\n                    // each x and y needs to be random\r\n                    r = Math.random() * 16 | 0;\r\n                }\r\n                if (guidHolder[i] === \"x\") {\r\n                    guidResponse += hex[r];\r\n                }\r\n                else if (guidHolder[i] === \"y\") {\r\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\r\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\r\n                    r |= 0x8; // set pos 3 to 1 as 1???\r\n                    guidResponse += hex[r];\r\n                }\r\n                else {\r\n                    guidResponse += guidHolder[i];\r\n                }\r\n            }\r\n            return guidResponse;\r\n        }\r\n    };\r\n    /**\r\n     * verifies if a string is  GUID\r\n     * @param guid\r\n     */\r\n    CryptoUtils.isGuid = function (guid) {\r\n        var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    };\r\n    /**\r\n     * Decimal to Hex\r\n     *\r\n     * @param num\r\n     */\r\n    CryptoUtils.decimalToHex = function (num) {\r\n        var hex = num.toString(16);\r\n        while (hex.length < 2) {\r\n            hex = \"0\" + hex;\r\n        }\r\n        return hex;\r\n    };\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_4_%E2%80%93_escaping_the_string_before_encoding_it\r\n    /**\r\n     * encoding string to base64 - platform specific check\r\n     *\r\n     * @param input\r\n     */\r\n    CryptoUtils.base64Encode = function (input) {\r\n        return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {\r\n            return String.fromCharCode(Number(\"0x\" + p1));\r\n        }));\r\n    };\r\n    /**\r\n     * Decodes a base64 encoded string.\r\n     *\r\n     * @param input\r\n     */\r\n    CryptoUtils.base64Decode = function (input) {\r\n        var encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        switch (encodedString.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                encodedString += \"==\";\r\n                break;\r\n            case 3:\r\n                encodedString += \"=\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid base64 string\");\r\n        }\r\n        return decodeURIComponent(atob(encodedString).split(\"\").map(function (c) {\r\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(\"\"));\r\n    };\r\n    /**\r\n     * deserialize a string\r\n     *\r\n     * @param query\r\n     */\r\n    CryptoUtils.deserialize = function (query) {\r\n        var match; // Regex for replacing addition symbol with a space\r\n        var pl = /\\+/g;\r\n        var search = /([^&=]+)=([^&]*)/g;\r\n        var decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); };\r\n        var obj = {};\r\n        match = search.exec(query);\r\n        while (match) {\r\n            obj[decode(match[1])] = decode(match[2]);\r\n            match = search.exec(query);\r\n        }\r\n        return obj;\r\n    };\r\n    return CryptoUtils;\r\n}());\r\nexport { CryptoUtils };\r\n//# sourceMappingURL=CryptoUtils.js.map"]},"metadata":{},"sourceType":"module"}