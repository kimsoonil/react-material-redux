{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * @hidden\r\n */\n\nimport { Authority } from \"./Authority\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\n\nvar AuthorityFactory =\n/** @class */\nfunction () {\n  function AuthorityFactory() {}\n\n  AuthorityFactory.saveMetadataFromNetwork = function (authorityInstance, telemetryManager, correlationId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var metadata;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , authorityInstance.resolveEndpointsAsync(telemetryManager, correlationId)];\n\n          case 1:\n            metadata = _a.sent();\n            this.metadataMap.set(authorityInstance.CanonicalAuthority, metadata);\n            return [2\n            /*return*/\n            , metadata];\n        }\n      });\n    });\n  };\n\n  AuthorityFactory.getMetadata = function (authorityUrl) {\n    return this.metadataMap.get(authorityUrl);\n  };\n\n  AuthorityFactory.saveMetadataFromConfig = function (authorityUrl, authorityMetadataJson) {\n    try {\n      if (authorityMetadataJson) {\n        var parsedMetadata = JSON.parse(authorityMetadataJson);\n\n        if (!parsedMetadata.authorization_endpoint || !parsedMetadata.end_session_endpoint || !parsedMetadata.issuer) {\n          throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n        }\n\n        this.metadataMap.set(authorityUrl, {\n          AuthorizationEndpoint: parsedMetadata.authorization_endpoint,\n          EndSessionEndpoint: parsedMetadata.end_session_endpoint,\n          Issuer: parsedMetadata.issuer\n        });\n      }\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n    }\n  };\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\r\n   */\n\n\n  AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority, authorityMetadata) {\n    if (StringUtils.isEmpty(authorityUrl)) {\n      return null;\n    }\n\n    if (authorityMetadata) {\n      // todo: log statements\n      this.saveMetadataFromConfig(authorityUrl, authorityMetadata);\n    }\n\n    return new Authority(authorityUrl, validateAuthority, this.metadataMap.get(authorityUrl));\n  };\n\n  AuthorityFactory.metadataMap = new Map();\n  return AuthorityFactory;\n}();\n\nexport { AuthorityFactory };","map":{"version":3,"sources":["../../src/authority/AuthorityFactory.ts"],"names":[],"mappings":"AAAA;;;AAGG;;AAEH;;AAEG;;AACH,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,WAAT,QAA4B,sBAA5B;AACA,SAAS,wBAAT,QAAyC,mCAAzC;;AAIA,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA,CAgDC;;AA7CuB,EAAA,gBAAA,CAAA,uBAAA,GAApB,UAA4C,iBAA5C,EAA0E,gBAA1E,EAA8G,aAA9G,EAAmI;;;;;;AAC9G,mBAAA,CAAA;AAAA;AAAA,cAAM,iBAAiB,CAAC,qBAAlB,CAAwC,gBAAxC,EAA0D,aAA1D,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AACN,iBAAK,WAAL,CAAiB,GAAjB,CAAqB,iBAAiB,CAAC,kBAAvC,EAA2D,QAA3D;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,QAAP,CAAA;;;;AACH,GAJmB;;AAMN,EAAA,gBAAA,CAAA,WAAA,GAAd,UAA0B,YAA1B,EAA8C;AAC1C,WAAO,KAAK,WAAL,CAAiB,GAAjB,CAAqB,YAArB,CAAP;AACH,GAFa;;AAIA,EAAA,gBAAA,CAAA,sBAAA,GAAd,UAAqC,YAArC,EAA2D,qBAA3D,EAAwF;AACpF,QAAI;AACA,UAAI,qBAAJ,EAA2B;AACvB,YAAM,cAAc,GAAG,IAAI,CAAC,KAAL,CAAW,qBAAX,CAAvB;;AAEA,YAAI,CAAC,cAAc,CAAC,sBAAhB,IAA0C,CAAC,cAAc,CAAC,oBAA1D,IAAkF,CAAC,cAAc,CAAC,MAAtG,EAA8G;AAC1G,gBAAM,wBAAwB,CAAC,mCAAzB,EAAN;AACH;;AAED,aAAK,WAAL,CAAiB,GAAjB,CAAqB,YAArB,EAAmC;AAC/B,UAAA,qBAAqB,EAAE,cAAc,CAAC,sBADP;AAE/B,UAAA,kBAAkB,EAAE,cAAc,CAAC,oBAFJ;AAG/B,UAAA,MAAM,EAAE,cAAc,CAAC;AAHQ,SAAnC;AAKH;AACJ,KAdD,CAcE,OAAO,CAAP,EAAU;AACR,YAAM,wBAAwB,CAAC,mCAAzB,EAAN;AACH;AACJ,GAlBa;AAoBd;;;AAGG;;;AACW,EAAA,gBAAA,CAAA,cAAA,GAAd,UAA6B,YAA7B,EAAmD,iBAAnD,EAA+E,iBAA/E,EAAyG;AACrG,QAAI,WAAW,CAAC,OAAZ,CAAoB,YAApB,CAAJ,EAAuC;AACnC,aAAO,IAAP;AACH;;AAED,QAAI,iBAAJ,EAAuB;AACnB;AACA,WAAK,sBAAL,CAA4B,YAA5B,EAA0C,iBAA1C;AACH;;AACD,WAAO,IAAI,SAAJ,CAAc,YAAd,EAA4B,iBAA5B,EAA+C,KAAK,WAAL,CAAiB,GAAjB,CAAqB,YAArB,CAA/C,CAAP;AACH,GAVa;;AApCC,EAAA,gBAAA,CAAA,WAAA,GAAc,IAAI,GAAJ,EAAd;AA+CnB,SAAA,gBAAA;AAAC,CAhDD,EAAA;;SAAa,gB","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * @hidden\r\n */\r\nimport { Authority } from \"./Authority\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nvar AuthorityFactory = /** @class */ (function () {\r\n    function AuthorityFactory() {\r\n    }\r\n    AuthorityFactory.saveMetadataFromNetwork = function (authorityInstance, telemetryManager, correlationId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var metadata;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, authorityInstance.resolveEndpointsAsync(telemetryManager, correlationId)];\r\n                    case 1:\r\n                        metadata = _a.sent();\r\n                        this.metadataMap.set(authorityInstance.CanonicalAuthority, metadata);\r\n                        return [2 /*return*/, metadata];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    AuthorityFactory.getMetadata = function (authorityUrl) {\r\n        return this.metadataMap.get(authorityUrl);\r\n    };\r\n    AuthorityFactory.saveMetadataFromConfig = function (authorityUrl, authorityMetadataJson) {\r\n        try {\r\n            if (authorityMetadataJson) {\r\n                var parsedMetadata = JSON.parse(authorityMetadataJson);\r\n                if (!parsedMetadata.authorization_endpoint || !parsedMetadata.end_session_endpoint || !parsedMetadata.issuer) {\r\n                    throw ClientConfigurationError.createInvalidAuthorityMetadataError();\r\n                }\r\n                this.metadataMap.set(authorityUrl, {\r\n                    AuthorizationEndpoint: parsedMetadata.authorization_endpoint,\r\n                    EndSessionEndpoint: parsedMetadata.end_session_endpoint,\r\n                    Issuer: parsedMetadata.issuer\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createInvalidAuthorityMetadataError();\r\n        }\r\n    };\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\r\n     */\r\n    AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority, authorityMetadata) {\r\n        if (StringUtils.isEmpty(authorityUrl)) {\r\n            return null;\r\n        }\r\n        if (authorityMetadata) {\r\n            // todo: log statements\r\n            this.saveMetadataFromConfig(authorityUrl, authorityMetadata);\r\n        }\r\n        return new Authority(authorityUrl, validateAuthority, this.metadataMap.get(authorityUrl));\r\n    };\r\n    AuthorityFactory.metadataMap = new Map();\r\n    return AuthorityFactory;\r\n}());\r\nexport { AuthorityFactory };\r\n//# sourceMappingURL=AuthorityFactory.js.map"]},"metadata":{},"sourceType":"module"}