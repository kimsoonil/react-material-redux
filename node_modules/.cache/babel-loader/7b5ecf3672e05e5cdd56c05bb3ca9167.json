{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { TELEMETRY_BLOB_EVENT_NAMES, EVENT_NAME_KEY, START_TIME_KEY, ELAPSED_TIME_KEY } from \"./TelemetryConstants\";\nimport { prependEventNamePrefix, startBrowserPerformanceMeasurement, endBrowserPerformanceMeasurement } from \"./TelemetryUtils\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\n\nvar TelemetryEvent =\n/** @class */\nfunction () {\n  function TelemetryEvent(eventName, correlationId, eventLabel) {\n    var _a;\n\n    this.eventId = CryptoUtils.createNewGuid();\n    this.label = eventLabel;\n    this.event = (_a = {}, _a[prependEventNamePrefix(EVENT_NAME_KEY)] = eventName, _a[prependEventNamePrefix(ELAPSED_TIME_KEY)] = -1, _a[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId, _a);\n  }\n\n  TelemetryEvent.prototype.setElapsedTime = function (time) {\n    this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;\n  };\n\n  TelemetryEvent.prototype.stop = function () {\n    // Set duration of event\n    this.setElapsedTime(+Date.now() - +this.startTimestamp);\n    endBrowserPerformanceMeasurement(this.displayName, this.perfStartMark, this.perfEndMark);\n  };\n\n  TelemetryEvent.prototype.start = function () {\n    this.startTimestamp = Date.now();\n    this.event[prependEventNamePrefix(START_TIME_KEY)] = this.startTimestamp;\n    startBrowserPerformanceMeasurement(this.perfStartMark);\n  };\n\n  Object.defineProperty(TelemetryEvent.prototype, \"telemetryCorrelationId\", {\n    get: function () {\n      return this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];\n    },\n    set: function (value) {\n      this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"eventName\", {\n    get: function () {\n      return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TelemetryEvent.prototype.get = function () {\n    return tslib_1.__assign({}, this.event, {\n      eventId: this.eventId\n    });\n  };\n\n  Object.defineProperty(TelemetryEvent.prototype, \"key\", {\n    get: function () {\n      return this.telemetryCorrelationId + \"_\" + this.eventId + \"-\" + this.eventName;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"displayName\", {\n    get: function () {\n      return \"Msal-\" + this.label + \"-\" + this.telemetryCorrelationId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"perfStartMark\", {\n    get: function () {\n      return \"start-\" + this.key;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"perfEndMark\", {\n    get: function () {\n      return \"end-\" + this.key;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return TelemetryEvent;\n}();\n\nexport default TelemetryEvent;","map":{"version":3,"sources":["../../src/telemetry/TelemetryEvent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { TELEMETRY_BLOB_EVENT_NAMES, EVENT_NAME_KEY, START_TIME_KEY, ELAPSED_TIME_KEY } from \"./TelemetryConstants\";\r\nimport { prependEventNamePrefix, startBrowserPerformanceMeasurement, endBrowserPerformanceMeasurement } from \"./TelemetryUtils\";\r\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\r\nvar TelemetryEvent = /** @class */ (function () {\r\n    function TelemetryEvent(eventName, correlationId, eventLabel) {\r\n        var _a;\r\n        this.eventId = CryptoUtils.createNewGuid();\r\n        this.label = eventLabel;\r\n        this.event = (_a = {},\r\n            _a[prependEventNamePrefix(EVENT_NAME_KEY)] = eventName,\r\n            _a[prependEventNamePrefix(ELAPSED_TIME_KEY)] = -1,\r\n            _a[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId,\r\n            _a);\r\n    }\r\n    TelemetryEvent.prototype.setElapsedTime = function (time) {\r\n        this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;\r\n    };\r\n    TelemetryEvent.prototype.stop = function () {\r\n        // Set duration of event\r\n        this.setElapsedTime(+Date.now() - +this.startTimestamp);\r\n        endBrowserPerformanceMeasurement(this.displayName, this.perfStartMark, this.perfEndMark);\r\n    };\r\n    TelemetryEvent.prototype.start = function () {\r\n        this.startTimestamp = Date.now();\r\n        this.event[prependEventNamePrefix(START_TIME_KEY)] = this.startTimestamp;\r\n        startBrowserPerformanceMeasurement(this.perfStartMark);\r\n    };\r\n    Object.defineProperty(TelemetryEvent.prototype, \"telemetryCorrelationId\", {\r\n        get: function () {\r\n            return this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];\r\n        },\r\n        set: function (value) {\r\n            this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TelemetryEvent.prototype, \"eventName\", {\r\n        get: function () {\r\n            return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TelemetryEvent.prototype.get = function () {\r\n        return tslib_1.__assign({}, this.event, { eventId: this.eventId });\r\n    };\r\n    Object.defineProperty(TelemetryEvent.prototype, \"key\", {\r\n        get: function () {\r\n            return this.telemetryCorrelationId + \"_\" + this.eventId + \"-\" + this.eventName;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TelemetryEvent.prototype, \"displayName\", {\r\n        get: function () {\r\n            return \"Msal-\" + this.label + \"-\" + this.telemetryCorrelationId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TelemetryEvent.prototype, \"perfStartMark\", {\r\n        get: function () {\r\n            return \"start-\" + this.key;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TelemetryEvent.prototype, \"perfEndMark\", {\r\n        get: function () {\r\n            return \"end-\" + this.key;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return TelemetryEvent;\r\n}());\r\nexport default TelemetryEvent;\r\n//# sourceMappingURL=TelemetryEvent.js.map"]},"metadata":{},"sourceType":"module"}