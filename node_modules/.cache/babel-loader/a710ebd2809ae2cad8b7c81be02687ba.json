{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { ClientAuthError } from \"./error/ClientAuthError\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\r\n * @hidden\r\n */\n\nvar ClientInfo =\n/** @class */\nfunction () {\n  function ClientInfo(rawClientInfo, authority) {\n    if (!rawClientInfo || StringUtils.isEmpty(rawClientInfo)) {\n      this.uid = \"\";\n      this.utid = \"\";\n      return;\n    }\n\n    try {\n      var decodedClientInfo = CryptoUtils.base64Decode(rawClientInfo);\n      var clientInfo = JSON.parse(decodedClientInfo);\n\n      if (clientInfo) {\n        if (clientInfo.hasOwnProperty(\"uid\")) {\n          this.uid = authority ? ClientInfo.stripPolicyFromUid(clientInfo.uid, authority) : clientInfo.uid;\n        }\n\n        if (clientInfo.hasOwnProperty(\"utid\")) {\n          this.utid = clientInfo.utid;\n        }\n      }\n    } catch (e) {\n      throw ClientAuthError.createClientInfoDecodingError(e);\n    }\n  }\n\n  Object.defineProperty(ClientInfo.prototype, \"uid\", {\n    get: function () {\n      return this._uid ? this._uid : \"\";\n    },\n    set: function (uid) {\n      this._uid = uid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClientInfo.prototype, \"utid\", {\n    get: function () {\n      return this._utid ? this._utid : \"\";\n    },\n    set: function (utid) {\n      this._utid = utid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ClientInfo.createClientInfoFromIdToken = function (idToken, authority) {\n    var clientInfo = {\n      uid: idToken.subject,\n      utid: \"\"\n    };\n    return new ClientInfo(CryptoUtils.base64Encode(JSON.stringify(clientInfo)), authority);\n  };\n\n  ClientInfo.stripPolicyFromUid = function (uid, authority) {\n    var uidSegments = uid.split(\"-\"); // Reverse the url segments so the last one is more easily accessible\n\n    var urlSegments = authority.split(\"/\").reverse();\n    var policy = \"\";\n\n    if (!StringUtils.isEmpty(urlSegments[0])) {\n      policy = urlSegments[0];\n    } else if (urlSegments.length > 1) {\n      // If the original url had a trailing slash, urlSegments[0] would be \"\" so take the next element\n      policy = urlSegments[1];\n    }\n\n    if (uidSegments[uidSegments.length - 1] === policy) {\n      // If the last segment of uid matches the last segment of authority url, remove the last segment of uid\n      return uidSegments.slice(0, uidSegments.length - 1).join(\"-\");\n    }\n\n    return uid;\n  };\n\n  ClientInfo.prototype.encodeClientInfo = function () {\n    var clientInfo = JSON.stringify({\n      uid: this.uid,\n      utid: this.utid\n    });\n    return CryptoUtils.base64Encode(clientInfo);\n  };\n\n  return ClientInfo;\n}();\n\nexport { ClientInfo };","map":{"version":3,"sources":["../src/ClientInfo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\r\nimport { ClientAuthError } from \"./error/ClientAuthError\";\r\nimport { StringUtils } from \"./utils/StringUtils\";\r\n/**\r\n * @hidden\r\n */\r\nvar ClientInfo = /** @class */ (function () {\r\n    function ClientInfo(rawClientInfo, authority) {\r\n        if (!rawClientInfo || StringUtils.isEmpty(rawClientInfo)) {\r\n            this.uid = \"\";\r\n            this.utid = \"\";\r\n            return;\r\n        }\r\n        try {\r\n            var decodedClientInfo = CryptoUtils.base64Decode(rawClientInfo);\r\n            var clientInfo = JSON.parse(decodedClientInfo);\r\n            if (clientInfo) {\r\n                if (clientInfo.hasOwnProperty(\"uid\")) {\r\n                    this.uid = authority ? ClientInfo.stripPolicyFromUid(clientInfo.uid, authority) : clientInfo.uid;\r\n                }\r\n                if (clientInfo.hasOwnProperty(\"utid\")) {\r\n                    this.utid = clientInfo.utid;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError.createClientInfoDecodingError(e);\r\n        }\r\n    }\r\n    Object.defineProperty(ClientInfo.prototype, \"uid\", {\r\n        get: function () {\r\n            return this._uid ? this._uid : \"\";\r\n        },\r\n        set: function (uid) {\r\n            this._uid = uid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClientInfo.prototype, \"utid\", {\r\n        get: function () {\r\n            return this._utid ? this._utid : \"\";\r\n        },\r\n        set: function (utid) {\r\n            this._utid = utid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ClientInfo.createClientInfoFromIdToken = function (idToken, authority) {\r\n        var clientInfo = {\r\n            uid: idToken.subject,\r\n            utid: \"\"\r\n        };\r\n        return new ClientInfo(CryptoUtils.base64Encode(JSON.stringify(clientInfo)), authority);\r\n    };\r\n    ClientInfo.stripPolicyFromUid = function (uid, authority) {\r\n        var uidSegments = uid.split(\"-\");\r\n        // Reverse the url segments so the last one is more easily accessible\r\n        var urlSegments = authority.split(\"/\").reverse();\r\n        var policy = \"\";\r\n        if (!StringUtils.isEmpty(urlSegments[0])) {\r\n            policy = urlSegments[0];\r\n        }\r\n        else if (urlSegments.length > 1) {\r\n            // If the original url had a trailing slash, urlSegments[0] would be \"\" so take the next element\r\n            policy = urlSegments[1];\r\n        }\r\n        if (uidSegments[uidSegments.length - 1] === policy) {\r\n            // If the last segment of uid matches the last segment of authority url, remove the last segment of uid\r\n            return uidSegments.slice(0, uidSegments.length - 1).join(\"-\");\r\n        }\r\n        return uid;\r\n    };\r\n    ClientInfo.prototype.encodeClientInfo = function () {\r\n        var clientInfo = JSON.stringify({ uid: this.uid, utid: this.utid });\r\n        return CryptoUtils.base64Encode(clientInfo);\r\n    };\r\n    return ClientInfo;\r\n}());\r\nexport { ClientInfo };\r\n//# sourceMappingURL=ClientInfo.js.map"]},"metadata":{},"sourceType":"module"}