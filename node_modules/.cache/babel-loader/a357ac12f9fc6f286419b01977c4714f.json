{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport { NetworkRequestType } from \"./utils/Constants\";\n/**\r\n * XHR client for JSON endpoints\r\n * https://www.npmjs.com/package/async-promise\r\n * @hidden\r\n */\n\nvar XhrClient =\n/** @class */\nfunction () {\n  function XhrClient() {}\n\n  XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url,\n      /* async: */\n      true);\n\n      if (enableCaching) {\n        /*\r\n         * TODO: (shivb) ensure that this can be cached\r\n         * xhr.setRequestHeader(\"Cache-Control\", \"Public\");\r\n         */\n      }\n\n      xhr.onload = function () {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          reject(_this.handleError(xhr.responseText));\n        }\n\n        var jsonResponse;\n\n        try {\n          jsonResponse = JSON.parse(xhr.responseText);\n        } catch (e) {\n          reject(_this.handleError(xhr.responseText));\n        }\n\n        var response = {\n          statusCode: xhr.status,\n          body: jsonResponse\n        };\n        resolve(response);\n      };\n\n      xhr.onerror = function () {\n        reject(xhr.status);\n      };\n\n      if (method === NetworkRequestType.GET) {\n        xhr.send();\n      } else {\n        throw \"not implemented\";\n      }\n    });\n  };\n\n  XhrClient.prototype.handleError = function (responseText) {\n    var jsonResponse;\n\n    try {\n      jsonResponse = JSON.parse(responseText);\n\n      if (jsonResponse.error) {\n        return jsonResponse.error;\n      } else {\n        throw responseText;\n      }\n    } catch (e) {\n      return responseText;\n    }\n  };\n\n  return XhrClient;\n}();\n\nexport { XhrClient };","map":{"version":3,"sources":["../src/XHRClient.ts"],"names":[],"mappings":"AAAA;;;AAGG;AAEH,SAAS,kBAAT,QAAmC,mBAAnC;AAEA;;;;AAIG;;AAEH,IAAA,SAAA;AAAA;AAAA,YAAA;AAAA,WAAA,SAAA,GAAA,CAwDC;;AAtDU,EAAA,SAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,GAAxB,EAAqC,MAArC,EAAqD,aAArD,EAA4E;AAA5E,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,IAAI,OAAJ,CAAyB,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC5C,UAAM,GAAG,GAAG,IAAI,cAAJ,EAAZ;AACA,MAAA,GAAG,CAAC,IAAJ,CAAS,MAAT,EAAiB,GAAjB;AAAsB;AAAa,UAAnC;;AACA,UAAI,aAAJ,EAAmB;AACf;;;AAGG;AACN;;AAED,MAAA,GAAG,CAAC,MAAJ,GAAa,YAAA;AACT,YAAI,GAAG,CAAC,MAAJ,GAAa,GAAb,IAAoB,GAAG,CAAC,MAAJ,IAAc,GAAtC,EAA2C;AACvC,UAAA,MAAM,CAAC,KAAI,CAAC,WAAL,CAAiB,GAAG,CAAC,YAArB,CAAD,CAAN;AACH;;AACD,YAAI,YAAJ;;AACA,YAAI;AACA,UAAA,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,YAAf,CAAf;AACH,SAFD,CAEE,OAAO,CAAP,EAAU;AACR,UAAA,MAAM,CAAC,KAAI,CAAC,WAAL,CAAiB,GAAG,CAAC,YAArB,CAAD,CAAN;AACH;;AACD,YAAM,QAAQ,GAAgB;AAC1B,UAAA,UAAU,EAAE,GAAG,CAAC,MADU;AAE1B,UAAA,IAAI,EAAE;AAFoB,SAA9B;AAIA,QAAA,OAAO,CAAC,QAAD,CAAP;AACH,OAfD;;AAiBA,MAAA,GAAG,CAAC,OAAJ,GAAc,YAAA;AACV,QAAA,MAAM,CAAC,GAAG,CAAC,MAAL,CAAN;AACH,OAFD;;AAIA,UAAI,MAAM,KAAK,kBAAkB,CAAC,GAAlC,EAAuC;AACnC,QAAA,GAAG,CAAC,IAAJ;AACH,OAFD,MAGK;AACD,cAAM,iBAAN;AACH;AACJ,KArCM,CAAP;AAsCH,GAvCM;;AAyCG,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,YAAtB,EAA0C;AACtC,QAAI,YAAJ;;AACA,QAAI;AACA,MAAA,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,YAAX,CAAf;;AACA,UAAI,YAAY,CAAC,KAAjB,EAAwB;AACpB,eAAO,YAAY,CAAC,KAApB;AACH,OAFD,MAEO;AACH,cAAM,YAAN;AACH;AACJ,KAPD,CAOE,OAAO,CAAP,EAAU;AACR,aAAO,YAAP;AACH;AACJ,GAZS;;AAad,SAAA,SAAA;AAAC,CAxDD,EAAA","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { NetworkRequestType } from \"./utils/Constants\";\r\n/**\r\n * XHR client for JSON endpoints\r\n * https://www.npmjs.com/package/async-promise\r\n * @hidden\r\n */\r\nvar XhrClient = /** @class */ (function () {\r\n    function XhrClient() {\r\n    }\r\n    XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /* async: */ true);\r\n            if (enableCaching) {\r\n                /*\r\n                 * TODO: (shivb) ensure that this can be cached\r\n                 * xhr.setRequestHeader(\"Cache-Control\", \"Public\");\r\n                 */\r\n            }\r\n            xhr.onload = function () {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    reject(_this.handleError(xhr.responseText));\r\n                }\r\n                var jsonResponse;\r\n                try {\r\n                    jsonResponse = JSON.parse(xhr.responseText);\r\n                }\r\n                catch (e) {\r\n                    reject(_this.handleError(xhr.responseText));\r\n                }\r\n                var response = {\r\n                    statusCode: xhr.status,\r\n                    body: jsonResponse\r\n                };\r\n                resolve(response);\r\n            };\r\n            xhr.onerror = function () {\r\n                reject(xhr.status);\r\n            };\r\n            if (method === NetworkRequestType.GET) {\r\n                xhr.send();\r\n            }\r\n            else {\r\n                throw \"not implemented\";\r\n            }\r\n        });\r\n    };\r\n    XhrClient.prototype.handleError = function (responseText) {\r\n        var jsonResponse;\r\n        try {\r\n            jsonResponse = JSON.parse(responseText);\r\n            if (jsonResponse.error) {\r\n                return jsonResponse.error;\r\n            }\r\n            else {\r\n                throw responseText;\r\n            }\r\n        }\r\n        catch (e) {\r\n            return responseText;\r\n        }\r\n    };\r\n    return XhrClient;\r\n}());\r\nexport { XhrClient };\r\n//# sourceMappingURL=XHRClient.js.map"]},"metadata":{},"sourceType":"module"}