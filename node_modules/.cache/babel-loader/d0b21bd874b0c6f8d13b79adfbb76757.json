{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport { ScopeSet } from \"../ScopeSet\";\nimport { UrlUtils } from \"./UrlUtils\";\n/**\r\n * @hidden\r\n */\n\nvar AuthCacheUtils =\n/** @class */\nfunction () {\n  function AuthCacheUtils() {}\n\n  AuthCacheUtils.filterTokenCacheItemsByScope = function (tokenCacheItems, requestScopes) {\n    return tokenCacheItems.filter(function (cacheItem) {\n      var cachedScopes = cacheItem.key.scopes.split(\" \");\n      var searchScopes = ScopeSet.removeDefaultScopes(requestScopes); // If requestScopes contain only default scopes search for default scopes otherwise search for everything but default scopes\n\n      return searchScopes.length === 0 ? ScopeSet.containsScope(cachedScopes, requestScopes) : ScopeSet.containsScope(cachedScopes, searchScopes);\n    });\n  };\n\n  AuthCacheUtils.filterTokenCacheItemsByAuthority = function (tokenCacheItems, authority) {\n    return tokenCacheItems.filter(function (cacheItem) {\n      return UrlUtils.CanonicalizeUri(cacheItem.key.authority) === authority;\n    });\n  };\n\n  AuthCacheUtils.filterTokenCacheItemsByDomain = function (tokenCacheItems, requestDomain) {\n    return tokenCacheItems.filter(function (cacheItem) {\n      var cacheItemDomain = UrlUtils.GetUrlComponents(cacheItem.key.authority).HostNameAndPort;\n      return cacheItemDomain === requestDomain;\n    });\n  };\n\n  return AuthCacheUtils;\n}();\n\nexport { AuthCacheUtils };","map":{"version":3,"sources":["../../src/utils/AuthCacheUtils.ts"],"names":[],"mappings":"AAAA;;;AAGG;AAGH,SAAS,QAAT,QAAyB,aAAzB;AACA,SAAS,QAAT,QAAyB,YAAzB;AAEA;;AAEG;;AACH,IAAA,cAAA;AAAA;AAAA,YAAA;AAAA,WAAA,cAAA,GAAA,CAsBC;;AArBU,EAAA,cAAA,CAAA,4BAAA,GAAP,UAAoC,eAApC,EAAkF,aAAlF,EAA0G;AACtG,WAAO,eAAe,CAAC,MAAhB,CAAuB,UAAC,SAAD,EAAgC;AAC1D,UAAM,YAAY,GAAG,SAAS,CAAC,GAAV,CAAc,MAAd,CAAqB,KAArB,CAA2B,GAA3B,CAArB;AACA,UAAM,YAAY,GAAG,QAAQ,CAAC,mBAAT,CAA6B,aAA7B,CAArB,CAF0D,CAI1D;;AACA,aAAO,YAAY,CAAC,MAAb,KAAwB,CAAxB,GAA4B,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EAAqC,aAArC,CAA5B,GAAiF,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EAAqC,YAArC,CAAxF;AACH,KANM,CAAP;AAQH,GATM;;AAWA,EAAA,cAAA,CAAA,gCAAA,GAAP,UAAwC,eAAxC,EAAsF,SAAtF,EAAuG;AACnG,WAAO,eAAe,CAAC,MAAhB,CAAuB,UAAC,SAAD,EAAgC;AAAK,aAAA,QAAQ,CAAC,eAAT,CAAyB,SAAS,CAAC,GAAV,CAAc,SAAvC,MAAA,SAAA;AAA+D,KAA3H,CAAP;AACH,GAFM;;AAIA,EAAA,cAAA,CAAA,6BAAA,GAAP,UAAqC,eAArC,EAAmF,aAAnF,EAAwG;AACpG,WAAO,eAAe,CAAC,MAAhB,CAAuB,UAAA,SAAA,EAAS;AACnC,UAAM,eAAe,GAAG,QAAQ,CAAC,gBAAT,CAA0B,SAAS,CAAC,GAAV,CAAc,SAAxC,EAAmD,eAA3E;AACA,aAAO,eAAe,KAAK,aAA3B;AACH,KAHM,CAAP;AAIH,GALM;;AAMX,SAAA,cAAA;AAAC,CAtBD,EAAA","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { ScopeSet } from \"../ScopeSet\";\r\nimport { UrlUtils } from \"./UrlUtils\";\r\n/**\r\n * @hidden\r\n */\r\nvar AuthCacheUtils = /** @class */ (function () {\r\n    function AuthCacheUtils() {\r\n    }\r\n    AuthCacheUtils.filterTokenCacheItemsByScope = function (tokenCacheItems, requestScopes) {\r\n        return tokenCacheItems.filter(function (cacheItem) {\r\n            var cachedScopes = cacheItem.key.scopes.split(\" \");\r\n            var searchScopes = ScopeSet.removeDefaultScopes(requestScopes);\r\n            // If requestScopes contain only default scopes search for default scopes otherwise search for everything but default scopes\r\n            return searchScopes.length === 0 ? ScopeSet.containsScope(cachedScopes, requestScopes) : ScopeSet.containsScope(cachedScopes, searchScopes);\r\n        });\r\n    };\r\n    AuthCacheUtils.filterTokenCacheItemsByAuthority = function (tokenCacheItems, authority) {\r\n        return tokenCacheItems.filter(function (cacheItem) { return UrlUtils.CanonicalizeUri(cacheItem.key.authority) === authority; });\r\n    };\r\n    AuthCacheUtils.filterTokenCacheItemsByDomain = function (tokenCacheItems, requestDomain) {\r\n        return tokenCacheItems.filter(function (cacheItem) {\r\n            var cacheItemDomain = UrlUtils.GetUrlComponents(cacheItem.key.authority).HostNameAndPort;\r\n            return cacheItemDomain === requestDomain;\r\n        });\r\n    };\r\n    return AuthCacheUtils;\r\n}());\r\nexport { AuthCacheUtils };\r\n//# sourceMappingURL=AuthCacheUtils.js.map"]},"metadata":{},"sourceType":"module"}