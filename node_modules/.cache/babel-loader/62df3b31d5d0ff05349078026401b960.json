{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\nimport { Constants } from \"./utils/Constants\";\n\nvar ScopeSet =\n/** @class */\nfunction () {\n  function ScopeSet() {}\n  /**\r\n   * Check if there are dup scopes in a given request\r\n   *\r\n   * @param cachedScopes\r\n   * @param scopes\r\n   */\n  // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker\n\n\n  ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {\n    var convertedCachedScopes = this.trimAndConvertArrayToLowerCase(cachedScopes.slice());\n    var requestScopes = this.trimAndConvertArrayToLowerCase(scopes.slice());\n\n    for (var i = 0; i < requestScopes.length; i++) {\n      if (convertedCachedScopes.indexOf(requestScopes[i].toLowerCase()) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Check if a given scope is present in the request\r\n   *\r\n   * @param cachedScopes\r\n   * @param scopes\r\n   */\n\n\n  ScopeSet.containsScope = function (cachedScopes, scopes) {\n    var convertedCachedScopes = this.trimAndConvertArrayToLowerCase(cachedScopes.slice());\n    var requestScopes = this.trimAndConvertArrayToLowerCase(scopes.slice());\n    return requestScopes.every(function (value) {\n      return convertedCachedScopes.indexOf(value.toString().toLowerCase()) >= 0;\n    });\n  };\n  /**\r\n   *  Trims and converts string to lower case\r\n   *\r\n   * @param scopes\r\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n\n\n  ScopeSet.trimAndConvertToLowerCase = function (scope) {\n    return scope.trim().toLowerCase();\n  };\n  /**\r\n   * Performs trimAndConvertToLowerCase on string array\r\n   * @param scopes\r\n   */\n\n\n  ScopeSet.trimAndConvertArrayToLowerCase = function (scopes) {\n    var _this = this;\n\n    return scopes.map(function (scope) {\n      return _this.trimAndConvertToLowerCase(scope);\n    });\n  };\n  /**\r\n   * Trims each scope in scopes array\r\n   * @param scopes\r\n   */\n\n\n  ScopeSet.trimScopes = function (scopes) {\n    return scopes.map(function (scope) {\n      return scope.trim();\n    });\n  };\n  /**\r\n   * Remove one element from a scope array\r\n   *\r\n   * @param scopes\r\n   * @param scope\r\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n\n\n  ScopeSet.removeElement = function (scopes, scope) {\n    var scopeVal = this.trimAndConvertToLowerCase(scope);\n    return scopes.filter(function (value) {\n      return value !== scopeVal;\n    });\n  };\n  /**\r\n   * Parse the scopes into a formatted scopeList\r\n   * @param scopes\r\n   */\n\n\n  ScopeSet.parseScope = function (scopes) {\n    var scopeList = \"\";\n\n    if (scopes) {\n      for (var i = 0; i < scopes.length; ++i) {\n        scopeList += i !== scopes.length - 1 ? scopes[i] + \" \" : scopes[i];\n      }\n    }\n\n    return scopeList;\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   * @ignore\r\n   */\n\n\n  ScopeSet.validateInputScope = function (scopes, scopesRequired) {\n    if (!scopes) {\n      if (scopesRequired) {\n        throw ClientConfigurationError.createScopesRequiredError(scopes);\n      } else {\n        return;\n      }\n    } // Check that scopes is an array object (also throws error if scopes == null)\n\n\n    if (!Array.isArray(scopes)) {\n      throw ClientConfigurationError.createScopesNonArrayError(scopes);\n    } // Check that scopes is not an empty array\n\n\n    if (scopes.length < 1 && scopesRequired) {\n      throw ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\n    }\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Extracts scope value from the state sent with the authentication request.\r\n   * @param {string} state\r\n   * @returns {string} scope.\r\n   * @ignore\r\n   */\n\n\n  ScopeSet.getScopeFromState = function (state) {\n    if (state) {\n      var splitIndex = state.indexOf(Constants.resourceDelimiter);\n\n      if (splitIndex > -1 && splitIndex + 1 < state.length) {\n        return state.substring(splitIndex + 1);\n      }\n    }\n\n    return \"\";\n  };\n  /**\r\n   * @ignore\r\n   * Appends extraScopesToConsent if passed\r\n   * @param {@link AuthenticationParameters}\r\n   */\n\n\n  ScopeSet.appendScopes = function (reqScopes, reqExtraScopesToConsent) {\n    if (reqScopes) {\n      var convertedExtraScopes = reqExtraScopesToConsent ? this.trimAndConvertArrayToLowerCase(reqExtraScopesToConsent.slice()) : null;\n      var convertedReqScopes = this.trimAndConvertArrayToLowerCase(reqScopes.slice());\n      return convertedExtraScopes ? convertedReqScopes.concat(convertedExtraScopes) : convertedReqScopes;\n    }\n\n    return null;\n  }; // #endregion\n\n  /**\r\n   * @ignore\r\n   * Returns true if the scopes array only contains openid and/or profile\r\n   */\n\n\n  ScopeSet.onlyContainsOidcScopes = function (scopes) {\n    var scopesCount = scopes.length;\n    var oidcScopesFound = 0;\n\n    if (scopes.indexOf(Constants.openidScope) > -1) {\n      oidcScopesFound += 1;\n    }\n\n    if (scopes.indexOf(Constants.profileScope) > -1) {\n      oidcScopesFound += 1;\n    }\n\n    return scopesCount > 0 && scopesCount === oidcScopesFound;\n  };\n  /**\r\n   * @ignore\r\n   * Returns true if the scopes array only contains openid and/or profile\r\n   */\n\n\n  ScopeSet.containsAnyOidcScopes = function (scopes) {\n    var containsOpenIdScope = scopes.indexOf(Constants.openidScope) > -1;\n    var containsProfileScope = scopes.indexOf(Constants.profileScope) > -1;\n    return containsOpenIdScope || containsProfileScope;\n  };\n  /**\r\n   * @ignore\r\n   * Returns true if the clientId is the only scope in the array\r\n   */\n\n\n  ScopeSet.onlyContainsClientId = function (scopes, clientId) {\n    // Double negation to force false value returned in case scopes is null\n    return !!scopes && scopes.indexOf(clientId) > -1 && scopes.length === 1;\n  };\n  /**\r\n   * @ignore\r\n   * Adds missing OIDC scopes to scopes array without duplication. Since STS requires OIDC scopes for\r\n   * all implicit flow requests, 'openid' and 'profile' should always be included in the final request\r\n   */\n\n\n  ScopeSet.appendDefaultScopes = function (scopes) {\n    var extendedScopes = scopes;\n\n    if (extendedScopes.indexOf(Constants.openidScope) === -1) {\n      extendedScopes.push(Constants.openidScope);\n    }\n\n    if (extendedScopes.indexOf(Constants.profileScope) === -1) {\n      extendedScopes.push(Constants.profileScope);\n    }\n\n    return extendedScopes;\n  };\n  /**\r\n   * @ignore\r\n   * Removes present OIDC scopes from scopes array.\r\n   */\n\n\n  ScopeSet.removeDefaultScopes = function (scopes) {\n    return scopes.filter(function (scope) {\n      return scope !== Constants.openidScope && scope !== Constants.profileScope;\n    });\n  };\n  /**\r\n   * @ignore\r\n   * Removes clientId from scopes array if included as only scope. If it's not the only scope, it is treated as a resource scope.\r\n   * @param scopes Array<string>: Pre-normalized scopes array\r\n   * @param clientId string: The application's clientId that is searched for in the scopes array\r\n   */\n\n\n  ScopeSet.translateClientIdIfSingleScope = function (scopes, clientId) {\n    return this.onlyContainsClientId(scopes, clientId) ? Constants.oidcScopes : scopes;\n  };\n\n  return ScopeSet;\n}();\n\nexport { ScopeSet };","map":{"version":3,"sources":["../src/ScopeSet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\r\nimport { Constants } from \"./utils/Constants\";\r\nvar ScopeSet = /** @class */ (function () {\r\n    function ScopeSet() {\r\n    }\r\n    /**\r\n     * Check if there are dup scopes in a given request\r\n     *\r\n     * @param cachedScopes\r\n     * @param scopes\r\n     */\r\n    // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker\r\n    ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {\r\n        var convertedCachedScopes = this.trimAndConvertArrayToLowerCase(cachedScopes.slice());\r\n        var requestScopes = this.trimAndConvertArrayToLowerCase(scopes.slice());\r\n        for (var i = 0; i < requestScopes.length; i++) {\r\n            if (convertedCachedScopes.indexOf(requestScopes[i].toLowerCase()) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Check if a given scope is present in the request\r\n     *\r\n     * @param cachedScopes\r\n     * @param scopes\r\n     */\r\n    ScopeSet.containsScope = function (cachedScopes, scopes) {\r\n        var convertedCachedScopes = this.trimAndConvertArrayToLowerCase(cachedScopes.slice());\r\n        var requestScopes = this.trimAndConvertArrayToLowerCase(scopes.slice());\r\n        return requestScopes.every(function (value) { return convertedCachedScopes.indexOf(value.toString().toLowerCase()) >= 0; });\r\n    };\r\n    /**\r\n     *  Trims and converts string to lower case\r\n     *\r\n     * @param scopes\r\n     */\r\n    // TODO: Rename this, too generic name for a function that only deals with scopes\r\n    ScopeSet.trimAndConvertToLowerCase = function (scope) {\r\n        return scope.trim().toLowerCase();\r\n    };\r\n    /**\r\n     * Performs trimAndConvertToLowerCase on string array\r\n     * @param scopes\r\n     */\r\n    ScopeSet.trimAndConvertArrayToLowerCase = function (scopes) {\r\n        var _this = this;\r\n        return scopes.map(function (scope) { return _this.trimAndConvertToLowerCase(scope); });\r\n    };\r\n    /**\r\n     * Trims each scope in scopes array\r\n     * @param scopes\r\n     */\r\n    ScopeSet.trimScopes = function (scopes) {\r\n        return scopes.map(function (scope) { return scope.trim(); });\r\n    };\r\n    /**\r\n     * Remove one element from a scope array\r\n     *\r\n     * @param scopes\r\n     * @param scope\r\n     */\r\n    // TODO: Rename this, too generic name for a function that only deals with scopes\r\n    ScopeSet.removeElement = function (scopes, scope) {\r\n        var scopeVal = this.trimAndConvertToLowerCase(scope);\r\n        return scopes.filter(function (value) { return value !== scopeVal; });\r\n    };\r\n    /**\r\n     * Parse the scopes into a formatted scopeList\r\n     * @param scopes\r\n     */\r\n    ScopeSet.parseScope = function (scopes) {\r\n        var scopeList = \"\";\r\n        if (scopes) {\r\n            for (var i = 0; i < scopes.length; ++i) {\r\n                scopeList += (i !== scopes.length - 1) ? scopes[i] + \" \" : scopes[i];\r\n            }\r\n        }\r\n        return scopeList;\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     * @ignore\r\n     */\r\n    ScopeSet.validateInputScope = function (scopes, scopesRequired) {\r\n        if (!scopes) {\r\n            if (scopesRequired) {\r\n                throw ClientConfigurationError.createScopesRequiredError(scopes);\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n        // Check that scopes is an array object (also throws error if scopes == null)\r\n        if (!Array.isArray(scopes)) {\r\n            throw ClientConfigurationError.createScopesNonArrayError(scopes);\r\n        }\r\n        // Check that scopes is not an empty array\r\n        if (scopes.length < 1 && scopesRequired) {\r\n            throw ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Extracts scope value from the state sent with the authentication request.\r\n     * @param {string} state\r\n     * @returns {string} scope.\r\n     * @ignore\r\n     */\r\n    ScopeSet.getScopeFromState = function (state) {\r\n        if (state) {\r\n            var splitIndex = state.indexOf(Constants.resourceDelimiter);\r\n            if (splitIndex > -1 && splitIndex + 1 < state.length) {\r\n                return state.substring(splitIndex + 1);\r\n            }\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Appends extraScopesToConsent if passed\r\n     * @param {@link AuthenticationParameters}\r\n     */\r\n    ScopeSet.appendScopes = function (reqScopes, reqExtraScopesToConsent) {\r\n        if (reqScopes) {\r\n            var convertedExtraScopes = reqExtraScopesToConsent ? this.trimAndConvertArrayToLowerCase(reqExtraScopesToConsent.slice()) : null;\r\n            var convertedReqScopes = this.trimAndConvertArrayToLowerCase(reqScopes.slice());\r\n            return convertedExtraScopes ? convertedReqScopes.concat(convertedExtraScopes) : convertedReqScopes;\r\n        }\r\n        return null;\r\n    };\r\n    // #endregion\r\n    /**\r\n     * @ignore\r\n     * Returns true if the scopes array only contains openid and/or profile\r\n     */\r\n    ScopeSet.onlyContainsOidcScopes = function (scopes) {\r\n        var scopesCount = scopes.length;\r\n        var oidcScopesFound = 0;\r\n        if (scopes.indexOf(Constants.openidScope) > -1) {\r\n            oidcScopesFound += 1;\r\n        }\r\n        if (scopes.indexOf(Constants.profileScope) > -1) {\r\n            oidcScopesFound += 1;\r\n        }\r\n        return (scopesCount > 0 && scopesCount === oidcScopesFound);\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Returns true if the scopes array only contains openid and/or profile\r\n     */\r\n    ScopeSet.containsAnyOidcScopes = function (scopes) {\r\n        var containsOpenIdScope = scopes.indexOf(Constants.openidScope) > -1;\r\n        var containsProfileScope = scopes.indexOf(Constants.profileScope) > -1;\r\n        return (containsOpenIdScope || containsProfileScope);\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Returns true if the clientId is the only scope in the array\r\n     */\r\n    ScopeSet.onlyContainsClientId = function (scopes, clientId) {\r\n        // Double negation to force false value returned in case scopes is null\r\n        return !!scopes && (scopes.indexOf(clientId) > -1 && scopes.length === 1);\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Adds missing OIDC scopes to scopes array without duplication. Since STS requires OIDC scopes for\r\n     * all implicit flow requests, 'openid' and 'profile' should always be included in the final request\r\n     */\r\n    ScopeSet.appendDefaultScopes = function (scopes) {\r\n        var extendedScopes = scopes;\r\n        if (extendedScopes.indexOf(Constants.openidScope) === -1) {\r\n            extendedScopes.push(Constants.openidScope);\r\n        }\r\n        if (extendedScopes.indexOf(Constants.profileScope) === -1) {\r\n            extendedScopes.push(Constants.profileScope);\r\n        }\r\n        return extendedScopes;\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Removes present OIDC scopes from scopes array.\r\n     */\r\n    ScopeSet.removeDefaultScopes = function (scopes) {\r\n        return scopes.filter(function (scope) {\r\n            return (scope !== Constants.openidScope && scope !== Constants.profileScope);\r\n        });\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Removes clientId from scopes array if included as only scope. If it's not the only scope, it is treated as a resource scope.\r\n     * @param scopes Array<string>: Pre-normalized scopes array\r\n     * @param clientId string: The application's clientId that is searched for in the scopes array\r\n     */\r\n    ScopeSet.translateClientIdIfSingleScope = function (scopes, clientId) {\r\n        return this.onlyContainsClientId(scopes, clientId) ? Constants.oidcScopes : scopes;\r\n    };\r\n    return ScopeSet;\r\n}());\r\nexport { ScopeSet };\r\n//# sourceMappingURL=ScopeSet.js.map"]},"metadata":{},"sourceType":"module"}