{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { XhrClient } from \"../XHRClient\";\nimport { AAD_INSTANCE_DISCOVERY_ENDPOINT, NetworkRequestType } from \"../utils/Constants\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\n\nvar TrustedAuthority =\n/** @class */\nfunction () {\n  function TrustedAuthority() {}\n  /**\r\n   *\r\n   * @param validateAuthority\r\n   * @param knownAuthorities\r\n   */\n\n\n  TrustedAuthority.setTrustedAuthoritiesFromConfig = function (validateAuthority, knownAuthorities) {\n    if (validateAuthority && !this.getTrustedHostList().length) {\n      knownAuthorities.forEach(function (authority) {\n        TrustedAuthority.TrustedHostList.push(authority.toLowerCase());\n      });\n    }\n  };\n  /**\r\n   *\r\n   * @param telemetryManager\r\n   * @param correlationId\r\n   */\n\n\n  TrustedAuthority.getAliases = function (authorityToVerify, telemetryManager, correlationId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var client, httpMethod, instanceDiscoveryEndpoint, httpEvent;\n      return tslib_1.__generator(this, function (_a) {\n        client = new XhrClient();\n        httpMethod = NetworkRequestType.GET;\n        instanceDiscoveryEndpoint = \"\" + AAD_INSTANCE_DISCOVERY_ENDPOINT + authorityToVerify + \"oauth2/v2.0/authorize\";\n        httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, instanceDiscoveryEndpoint, \"getAliases\");\n        return [2\n        /*return*/\n        , client.sendRequestAsync(instanceDiscoveryEndpoint, httpMethod, true).then(function (response) {\n          httpEvent.httpResponseStatus = response.statusCode;\n          telemetryManager.stopEvent(httpEvent);\n          return response.body.metadata;\n        }).catch(function (err) {\n          httpEvent.serverErrorCode = err;\n          telemetryManager.stopEvent(httpEvent);\n          throw err;\n        })];\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param telemetryManager\r\n   * @param correlationId\r\n   */\n\n\n  TrustedAuthority.setTrustedAuthoritiesFromNetwork = function (authorityToVerify, telemetryManager, correlationId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var metadata, host;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getAliases(authorityToVerify, telemetryManager, correlationId)];\n\n          case 1:\n            metadata = _a.sent();\n            metadata.forEach(function (entry) {\n              var authorities = entry.aliases;\n              authorities.forEach(function (authority) {\n                TrustedAuthority.TrustedHostList.push(authority.toLowerCase());\n              });\n            });\n            host = UrlUtils.GetUrlComponents(authorityToVerify).HostNameAndPort;\n\n            if (TrustedAuthority.getTrustedHostList().length && !TrustedAuthority.IsInTrustedHostList(host)) {\n              // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n              TrustedAuthority.TrustedHostList.push(host.toLowerCase());\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TrustedAuthority.getTrustedHostList = function () {\n    return this.TrustedHostList;\n  };\n  /**\r\n   * Checks to see if the host is in a list of trusted hosts\r\n   * @param host\r\n   */\n\n\n  TrustedAuthority.IsInTrustedHostList = function (host) {\n    return this.TrustedHostList.indexOf(host.toLowerCase()) > -1;\n  };\n\n  TrustedAuthority.TrustedHostList = [];\n  return TrustedAuthority;\n}();\n\nexport { TrustedAuthority };","map":{"version":3,"sources":["../../src/authority/TrustedAuthority.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { XhrClient } from \"../XHRClient\";\r\nimport { AAD_INSTANCE_DISCOVERY_ENDPOINT, NetworkRequestType } from \"../utils/Constants\";\r\nimport { UrlUtils } from \"../utils/UrlUtils\";\r\nvar TrustedAuthority = /** @class */ (function () {\r\n    function TrustedAuthority() {\r\n    }\r\n    /**\r\n     *\r\n     * @param validateAuthority\r\n     * @param knownAuthorities\r\n     */\r\n    TrustedAuthority.setTrustedAuthoritiesFromConfig = function (validateAuthority, knownAuthorities) {\r\n        if (validateAuthority && !this.getTrustedHostList().length) {\r\n            knownAuthorities.forEach(function (authority) {\r\n                TrustedAuthority.TrustedHostList.push(authority.toLowerCase());\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param telemetryManager\r\n     * @param correlationId\r\n     */\r\n    TrustedAuthority.getAliases = function (authorityToVerify, telemetryManager, correlationId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var client, httpMethod, instanceDiscoveryEndpoint, httpEvent;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                client = new XhrClient();\r\n                httpMethod = NetworkRequestType.GET;\r\n                instanceDiscoveryEndpoint = \"\" + AAD_INSTANCE_DISCOVERY_ENDPOINT + authorityToVerify + \"oauth2/v2.0/authorize\";\r\n                httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, instanceDiscoveryEndpoint, \"getAliases\");\r\n                return [2 /*return*/, client.sendRequestAsync(instanceDiscoveryEndpoint, httpMethod, true)\r\n                        .then(function (response) {\r\n                        httpEvent.httpResponseStatus = response.statusCode;\r\n                        telemetryManager.stopEvent(httpEvent);\r\n                        return response.body.metadata;\r\n                    })\r\n                        .catch(function (err) {\r\n                        httpEvent.serverErrorCode = err;\r\n                        telemetryManager.stopEvent(httpEvent);\r\n                        throw err;\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param telemetryManager\r\n     * @param correlationId\r\n     */\r\n    TrustedAuthority.setTrustedAuthoritiesFromNetwork = function (authorityToVerify, telemetryManager, correlationId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var metadata, host;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getAliases(authorityToVerify, telemetryManager, correlationId)];\r\n                    case 1:\r\n                        metadata = _a.sent();\r\n                        metadata.forEach(function (entry) {\r\n                            var authorities = entry.aliases;\r\n                            authorities.forEach(function (authority) {\r\n                                TrustedAuthority.TrustedHostList.push(authority.toLowerCase());\r\n                            });\r\n                        });\r\n                        host = UrlUtils.GetUrlComponents(authorityToVerify).HostNameAndPort;\r\n                        if (TrustedAuthority.getTrustedHostList().length && !TrustedAuthority.IsInTrustedHostList(host)) {\r\n                            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\r\n                            TrustedAuthority.TrustedHostList.push(host.toLowerCase());\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TrustedAuthority.getTrustedHostList = function () {\r\n        return this.TrustedHostList;\r\n    };\r\n    /**\r\n     * Checks to see if the host is in a list of trusted hosts\r\n     * @param host\r\n     */\r\n    TrustedAuthority.IsInTrustedHostList = function (host) {\r\n        return this.TrustedHostList.indexOf(host.toLowerCase()) > -1;\r\n    };\r\n    TrustedAuthority.TrustedHostList = [];\r\n    return TrustedAuthority;\r\n}());\r\nexport { TrustedAuthority };\r\n//# sourceMappingURL=TrustedAuthority.js.map"]},"metadata":{},"sourceType":"module"}