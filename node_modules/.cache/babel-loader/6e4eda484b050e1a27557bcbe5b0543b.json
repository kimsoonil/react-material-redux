{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\nimport TelemetryEvent from \"./TelemetryEvent\";\nimport { prependEventNamePrefix } from \"./TelemetryUtils\";\n\nvar DefaultEvent =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DefaultEvent, _super); // TODO Platform Type\n\n\n  function DefaultEvent(platform, correlationId, clientId, eventCount) {\n    var _this = _super.call(this, prependEventNamePrefix(\"default_event\"), correlationId, \"DefaultEvent\") || this;\n\n    _this.event[prependEventNamePrefix(\"client_id\")] = clientId;\n    _this.event[prependEventNamePrefix(\"sdk_plaform\")] = platform.sdk;\n    _this.event[prependEventNamePrefix(\"sdk_version\")] = platform.sdkVersion;\n    _this.event[prependEventNamePrefix(\"application_name\")] = platform.applicationName;\n    _this.event[prependEventNamePrefix(\"application_version\")] = platform.applicationVersion;\n    _this.event[prependEventNamePrefix(\"effective_connection_speed\")] = platform.networkInformation && platform.networkInformation.connectionSpeed;\n    _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.UiEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix(\"ui_event\"), eventCount);\n    _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.HttpEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix(\"http_event\"), eventCount);\n    _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.CacheEventCountConstStrKey] = _this.getEventCount(prependEventNamePrefix(\"cache_event\"), eventCount);\n    return _this; // / Device id?\n  }\n\n  DefaultEvent.prototype.getEventCount = function (eventName, eventCount) {\n    if (!eventCount[eventName]) {\n      return 0;\n    }\n\n    return eventCount[eventName];\n  };\n\n  return DefaultEvent;\n}(TelemetryEvent);\n\nexport default DefaultEvent;","map":{"version":3,"sources":["../../src/telemetry/DefaultEvent.ts"],"names":[],"mappings":"AAAA;;;AAGG;;AAEH,SAAS,0BAAT,QAA2C,sBAA3C;AACA,OAAO,cAAP,MAA2B,kBAA3B;AAEA,SAAS,sBAAT,QAAuC,kBAAvC;;AAEA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA,EAA1C,CACI;;;AACA,WAAA,YAAA,CAAY,QAAZ,EAAyC,aAAzC,EAAgE,QAAhE,EAAkF,UAAlF,EAAwG;AAAxG,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,sBAAsB,CAAC,eAAD,CAA5B,EAA+C,aAA/C,EAA8D,cAA9D,KAA6E,IADjF;;AAEI,IAAA,KAAI,CAAC,KAAL,CAAW,sBAAsB,CAAC,WAAD,CAAjC,IAAkD,QAAlD;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,sBAAsB,CAAC,aAAD,CAAjC,IAAoD,QAAQ,CAAC,GAA7D;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,sBAAsB,CAAC,aAAD,CAAjC,IAAoD,QAAQ,CAAC,UAA7D;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,sBAAsB,CAAC,kBAAD,CAAjC,IAAyD,QAAQ,CAAC,eAAlE;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,sBAAsB,CAAC,qBAAD,CAAjC,IAA4D,QAAQ,CAAC,kBAArE;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,sBAAsB,CAAC,4BAAD,CAAjC,IAAmE,QAAQ,CAAC,kBAAT,IAA+B,QAAQ,CAAC,kBAAT,CAA4B,eAA9H;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,KAAG,0BAA0B,CAAC,6BAAzC,IAA4E,KAAI,CAAC,aAAL,CAAmB,sBAAsB,CAAC,UAAD,CAAzC,EAAuD,UAAvD,CAA5E;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,KAAG,0BAA0B,CAAC,+BAAzC,IAA8E,KAAI,CAAC,aAAL,CAAmB,sBAAsB,CAAC,YAAD,CAAzC,EAAyD,UAAzD,CAA9E;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,KAAG,0BAA0B,CAAC,0BAAzC,IAAyE,KAAI,CAAC,aAAL,CAAmB,sBAAsB,CAAC,aAAD,CAAzC,EAA0D,UAA1D,CAAzE;iBAVoG,CAWpG;AACH;;AAEO,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,SAAtB,EAAyC,UAAzC,EAA+D;AAC3D,QAAI,CAAC,UAAU,CAAC,SAAD,CAAf,EAA4B;AACxB,aAAO,CAAP;AACH;;AACD,WAAO,UAAU,CAAC,SAAD,CAAjB;AACH,GALO;;AAMZ,SAAA,YAAA;AAAC,CAtBD,CAA0C,cAA1C,CAAA","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\r\nimport TelemetryEvent from \"./TelemetryEvent\";\r\nimport { prependEventNamePrefix } from \"./TelemetryUtils\";\r\nvar DefaultEvent = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DefaultEvent, _super);\r\n    // TODO Platform Type\r\n    function DefaultEvent(platform, correlationId, clientId, eventCount) {\r\n        var _this = _super.call(this, prependEventNamePrefix(\"default_event\"), correlationId, \"DefaultEvent\") || this;\r\n        _this.event[prependEventNamePrefix(\"client_id\")] = clientId;\r\n        _this.event[prependEventNamePrefix(\"sdk_plaform\")] = platform.sdk;\r\n        _this.event[prependEventNamePrefix(\"sdk_version\")] = platform.sdkVersion;\r\n        _this.event[prependEventNamePrefix(\"application_name\")] = platform.applicationName;\r\n        _this.event[prependEventNamePrefix(\"application_version\")] = platform.applicationVersion;\r\n        _this.event[prependEventNamePrefix(\"effective_connection_speed\")] = platform.networkInformation && platform.networkInformation.connectionSpeed;\r\n        _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.UiEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix(\"ui_event\"), eventCount);\r\n        _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.HttpEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix(\"http_event\"), eventCount);\r\n        _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.CacheEventCountConstStrKey] = _this.getEventCount(prependEventNamePrefix(\"cache_event\"), eventCount);\r\n        return _this;\r\n        // / Device id?\r\n    }\r\n    DefaultEvent.prototype.getEventCount = function (eventName, eventCount) {\r\n        if (!eventCount[eventName]) {\r\n            return 0;\r\n        }\r\n        return eventCount[eventName];\r\n    };\r\n    return DefaultEvent;\r\n}(TelemetryEvent));\r\nexport default DefaultEvent;\r\n//# sourceMappingURL=DefaultEvent.js.map"]},"metadata":{},"sourceType":"module"}