{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport { Constants, SSOTypes, ServerHashParamKeys } from \"./Constants\";\nimport { ScopeSet } from \"../ScopeSet\";\nimport { StringUtils } from \"./StringUtils\";\nimport { CryptoUtils } from \"./CryptoUtils\";\n/**\r\n * @hidden\r\n */\n\nvar UrlUtils =\n/** @class */\nfunction () {\n  function UrlUtils() {}\n  /**\r\n   * generates the URL with QueryString Parameters\r\n   * @param scopes\r\n   */\n\n\n  UrlUtils.createNavigateUrl = function (serverRequestParams) {\n    var str = this.createNavigationUrlString(serverRequestParams);\n    var authEndpoint = serverRequestParams.authorityInstance.AuthorizationEndpoint; // if the endpoint already has queryparams, lets add to it, otherwise add the first one\n\n    if (authEndpoint.indexOf(\"?\") < 0) {\n      authEndpoint += \"?\";\n    } else {\n      authEndpoint += \"&\";\n    }\n\n    var requestUrl = \"\" + authEndpoint + str.join(\"&\");\n    return requestUrl;\n  };\n  /**\r\n   * Generate the array of all QueryStringParams to be sent to the server\r\n   * @param scopes\r\n   */\n\n\n  UrlUtils.createNavigationUrlString = function (serverRequestParams) {\n    var scopes = ScopeSet.appendDefaultScopes(serverRequestParams.scopes);\n    var str = [];\n    str.push(\"response_type=\" + serverRequestParams.responseType);\n    str.push(\"scope=\" + encodeURIComponent(ScopeSet.parseScope(scopes)));\n    str.push(\"client_id=\" + encodeURIComponent(serverRequestParams.clientId));\n    str.push(\"redirect_uri=\" + encodeURIComponent(serverRequestParams.redirectUri));\n    str.push(\"state=\" + encodeURIComponent(serverRequestParams.state));\n    str.push(\"nonce=\" + encodeURIComponent(serverRequestParams.nonce));\n    str.push(\"client_info=1\");\n    str.push(\"x-client-SKU=\" + serverRequestParams.xClientSku);\n    str.push(\"x-client-Ver=\" + serverRequestParams.xClientVer);\n\n    if (serverRequestParams.promptValue) {\n      str.push(\"prompt=\" + encodeURIComponent(serverRequestParams.promptValue));\n    }\n\n    if (serverRequestParams.claimsValue) {\n      str.push(\"claims=\" + encodeURIComponent(serverRequestParams.claimsValue));\n    }\n\n    if (serverRequestParams.queryParameters) {\n      str.push(serverRequestParams.queryParameters);\n    }\n\n    if (serverRequestParams.extraQueryParameters) {\n      str.push(serverRequestParams.extraQueryParameters);\n    }\n\n    str.push(\"client-request-id=\" + encodeURIComponent(serverRequestParams.correlationId));\n    return str;\n  };\n  /**\r\n   * Returns current window URL as redirect uri\r\n   */\n\n\n  UrlUtils.getCurrentUrl = function () {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n  };\n  /**\r\n   * Returns given URL with query string removed\r\n   */\n\n\n  UrlUtils.removeHashFromUrl = function (url) {\n    return url.split(\"#\")[0];\n  };\n  /**\r\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n   * @param href The url\r\n   * @param tenantId The tenant id to replace\r\n   */\n\n\n  UrlUtils.replaceTenantPath = function (url, tenantId) {\n    var lowerCaseUrl = url.toLowerCase();\n    var urlObject = this.GetUrlComponents(lowerCaseUrl);\n    var pathArray = urlObject.PathSegments;\n\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === Constants.common || pathArray[0] === SSOTypes.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n\n    return this.constructAuthorityUriFromObject(urlObject, pathArray);\n  };\n\n  UrlUtils.constructAuthorityUriFromObject = function (urlObject, pathArray) {\n    return this.CanonicalizeUri(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + pathArray.join(\"/\"));\n  };\n  /**\r\n   * Checks if an authority is common (ex. https://a:b/common/)\r\n   * @param url The url\r\n   * @returns true if authority is common and false otherwise\r\n   */\n\n\n  UrlUtils.isCommonAuthority = function (url) {\n    var authority = this.CanonicalizeUri(url);\n    var pathArray = this.GetUrlComponents(authority).PathSegments;\n    return pathArray.length !== 0 && pathArray[0] === Constants.common;\n  };\n  /**\r\n   * Checks if an authority is for organizations (ex. https://a:b/organizations/)\r\n   * @param url The url\r\n   * @returns true if authority is for  and false otherwise\r\n   */\n\n\n  UrlUtils.isOrganizationsAuthority = function (url) {\n    var authority = this.CanonicalizeUri(url);\n    var pathArray = this.GetUrlComponents(authority).PathSegments;\n    return pathArray.length !== 0 && pathArray[0] === SSOTypes.ORGANIZATIONS;\n  };\n  /**\r\n   * Parses out the components from a url string.\r\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n   */\n\n\n  UrlUtils.GetUrlComponents = function (url) {\n    if (!url) {\n      throw \"Url required\";\n    } // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n\n\n    var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n    var match = url.match(regEx);\n\n    if (!match || match.length < 6) {\n      throw \"Valid url required\";\n    }\n\n    var urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5]\n    };\n    var pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(function (val) {\n      return val && val.length > 0;\n    }); // remove empty elements\n\n    urlComponents.PathSegments = pathSegments;\n\n    if (match[6]) {\n      urlComponents.Search = match[6];\n    }\n\n    if (match[8]) {\n      urlComponents.Hash = match[8];\n    }\n\n    return urlComponents;\n  };\n  /**\r\n   * Given a url or path, append a trailing slash if one doesnt exist\r\n   *\r\n   * @param url\r\n   */\n\n\n  UrlUtils.CanonicalizeUri = function (url) {\n    if (url) {\n      url = url.toLowerCase();\n    }\n\n    if (url && !UrlUtils.endsWith(url, \"/\")) {\n      url += \"/\";\n    }\n\n    return url;\n  };\n  /**\r\n   * Checks to see if the url ends with the suffix\r\n   * Required because we are compiling for es5 instead of es6\r\n   * @param url\r\n   * @param str\r\n   */\n  // TODO: Rename this, not clear what it is supposed to do\n\n\n  UrlUtils.endsWith = function (url, suffix) {\n    if (!url || !suffix) {\n      return false;\n    }\n\n    return url.indexOf(suffix, url.length - suffix.length) !== -1;\n  };\n  /**\r\n   * Utils function to remove the login_hint and domain_hint from the i/p extraQueryParameters\r\n   * @param url\r\n   * @param name\r\n   */\n\n\n  UrlUtils.urlRemoveQueryStringParameter = function (url, name) {\n    if (StringUtils.isEmpty(url)) {\n      return url;\n    }\n\n    var regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\n    url = url.replace(regex, \"\"); // name=value&\n\n    regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\n    url = url.replace(regex, \"\"); // name=value\n\n    regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\n    url = url.replace(regex, \"\");\n    return url;\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * Returns the anchor part(#) of the URL\r\n   */\n\n\n  UrlUtils.getHashFromUrl = function (urlStringOrFragment) {\n    var hashIndex1 = urlStringOrFragment.indexOf(\"#\");\n    var hashIndex2 = urlStringOrFragment.indexOf(\"#/\");\n\n    if (hashIndex2 > -1) {\n      return urlStringOrFragment.substring(hashIndex2 + 2);\n    } else if (hashIndex1 > -1) {\n      return urlStringOrFragment.substring(hashIndex1 + 1);\n    }\n\n    return urlStringOrFragment;\n  };\n  /**\r\n   * @hidden\r\n   * Check if the url contains a hash with known properties\r\n   * @ignore\r\n   */\n\n\n  UrlUtils.urlContainsHash = function (urlString) {\n    var parameters = UrlUtils.deserializeHash(urlString);\n    return parameters.hasOwnProperty(ServerHashParamKeys.ERROR_DESCRIPTION) || parameters.hasOwnProperty(ServerHashParamKeys.ERROR) || parameters.hasOwnProperty(ServerHashParamKeys.ACCESS_TOKEN) || parameters.hasOwnProperty(ServerHashParamKeys.ID_TOKEN);\n  };\n  /**\r\n   * @hidden\r\n   * Returns deserialized portion of URL hash\r\n   * @ignore\r\n   */\n\n\n  UrlUtils.deserializeHash = function (urlFragment) {\n    var hash = UrlUtils.getHashFromUrl(urlFragment);\n    return CryptoUtils.deserialize(hash);\n  };\n  /**\r\n   * @ignore\r\n   * @param {string} URI\r\n   * @returns {string} host from the URI\r\n   *\r\n   * extract URI from the host\r\n   */\n\n\n  UrlUtils.getHostFromUri = function (uri) {\n    // remove http:// or https:// from uri\n    var extractedUri = String(uri).replace(/^(https?:)\\/\\//, \"\");\n    extractedUri = extractedUri.split(\"/\")[0];\n    return extractedUri;\n  };\n\n  return UrlUtils;\n}();\n\nexport { UrlUtils };","map":{"version":3,"sources":["../../src/utils/UrlUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { Constants, SSOTypes, ServerHashParamKeys } from \"./Constants\";\r\nimport { ScopeSet } from \"../ScopeSet\";\r\nimport { StringUtils } from \"./StringUtils\";\r\nimport { CryptoUtils } from \"./CryptoUtils\";\r\n/**\r\n * @hidden\r\n */\r\nvar UrlUtils = /** @class */ (function () {\r\n    function UrlUtils() {\r\n    }\r\n    /**\r\n     * generates the URL with QueryString Parameters\r\n     * @param scopes\r\n     */\r\n    UrlUtils.createNavigateUrl = function (serverRequestParams) {\r\n        var str = this.createNavigationUrlString(serverRequestParams);\r\n        var authEndpoint = serverRequestParams.authorityInstance.AuthorizationEndpoint;\r\n        // if the endpoint already has queryparams, lets add to it, otherwise add the first one\r\n        if (authEndpoint.indexOf(\"?\") < 0) {\r\n            authEndpoint += \"?\";\r\n        }\r\n        else {\r\n            authEndpoint += \"&\";\r\n        }\r\n        var requestUrl = \"\" + authEndpoint + str.join(\"&\");\r\n        return requestUrl;\r\n    };\r\n    /**\r\n     * Generate the array of all QueryStringParams to be sent to the server\r\n     * @param scopes\r\n     */\r\n    UrlUtils.createNavigationUrlString = function (serverRequestParams) {\r\n        var scopes = ScopeSet.appendDefaultScopes(serverRequestParams.scopes);\r\n        var str = [];\r\n        str.push(\"response_type=\" + serverRequestParams.responseType);\r\n        str.push(\"scope=\" + encodeURIComponent(ScopeSet.parseScope(scopes)));\r\n        str.push(\"client_id=\" + encodeURIComponent(serverRequestParams.clientId));\r\n        str.push(\"redirect_uri=\" + encodeURIComponent(serverRequestParams.redirectUri));\r\n        str.push(\"state=\" + encodeURIComponent(serverRequestParams.state));\r\n        str.push(\"nonce=\" + encodeURIComponent(serverRequestParams.nonce));\r\n        str.push(\"client_info=1\");\r\n        str.push(\"x-client-SKU=\" + serverRequestParams.xClientSku);\r\n        str.push(\"x-client-Ver=\" + serverRequestParams.xClientVer);\r\n        if (serverRequestParams.promptValue) {\r\n            str.push(\"prompt=\" + encodeURIComponent(serverRequestParams.promptValue));\r\n        }\r\n        if (serverRequestParams.claimsValue) {\r\n            str.push(\"claims=\" + encodeURIComponent(serverRequestParams.claimsValue));\r\n        }\r\n        if (serverRequestParams.queryParameters) {\r\n            str.push(serverRequestParams.queryParameters);\r\n        }\r\n        if (serverRequestParams.extraQueryParameters) {\r\n            str.push(serverRequestParams.extraQueryParameters);\r\n        }\r\n        str.push(\"client-request-id=\" + encodeURIComponent(serverRequestParams.correlationId));\r\n        return str;\r\n    };\r\n    /**\r\n     * Returns current window URL as redirect uri\r\n     */\r\n    UrlUtils.getCurrentUrl = function () {\r\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n    };\r\n    /**\r\n     * Returns given URL with query string removed\r\n     */\r\n    UrlUtils.removeHashFromUrl = function (url) {\r\n        return url.split(\"#\")[0];\r\n    };\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    UrlUtils.replaceTenantPath = function (url, tenantId) {\r\n        var lowerCaseUrl = url.toLowerCase();\r\n        var urlObject = this.GetUrlComponents(lowerCaseUrl);\r\n        var pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === Constants.common || pathArray[0] === SSOTypes.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return this.constructAuthorityUriFromObject(urlObject, pathArray);\r\n    };\r\n    UrlUtils.constructAuthorityUriFromObject = function (urlObject, pathArray) {\r\n        return this.CanonicalizeUri(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + pathArray.join(\"/\"));\r\n    };\r\n    /**\r\n     * Checks if an authority is common (ex. https://a:b/common/)\r\n     * @param url The url\r\n     * @returns true if authority is common and false otherwise\r\n     */\r\n    UrlUtils.isCommonAuthority = function (url) {\r\n        var authority = this.CanonicalizeUri(url);\r\n        var pathArray = this.GetUrlComponents(authority).PathSegments;\r\n        return (pathArray.length !== 0 && pathArray[0] === Constants.common);\r\n    };\r\n    /**\r\n     * Checks if an authority is for organizations (ex. https://a:b/organizations/)\r\n     * @param url The url\r\n     * @returns true if authority is for  and false otherwise\r\n     */\r\n    UrlUtils.isOrganizationsAuthority = function (url) {\r\n        var authority = this.CanonicalizeUri(url);\r\n        var pathArray = this.GetUrlComponents(authority).PathSegments;\r\n        return (pathArray.length !== 0 && pathArray[0] === SSOTypes.ORGANIZATIONS);\r\n    };\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    UrlUtils.GetUrlComponents = function (url) {\r\n        if (!url) {\r\n            throw \"Url required\";\r\n        }\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        var match = url.match(regEx);\r\n        if (!match || match.length < 6) {\r\n            throw \"Valid url required\";\r\n        }\r\n        var urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5]\r\n        };\r\n        var pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (match[6]) {\r\n            urlComponents.Search = match[6];\r\n        }\r\n        if (match[8]) {\r\n            urlComponents.Hash = match[8];\r\n        }\r\n        return urlComponents;\r\n    };\r\n    /**\r\n     * Given a url or path, append a trailing slash if one doesnt exist\r\n     *\r\n     * @param url\r\n     */\r\n    UrlUtils.CanonicalizeUri = function (url) {\r\n        if (url) {\r\n            url = url.toLowerCase();\r\n        }\r\n        if (url && !UrlUtils.endsWith(url, \"/\")) {\r\n            url += \"/\";\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Checks to see if the url ends with the suffix\r\n     * Required because we are compiling for es5 instead of es6\r\n     * @param url\r\n     * @param str\r\n     */\r\n    // TODO: Rename this, not clear what it is supposed to do\r\n    UrlUtils.endsWith = function (url, suffix) {\r\n        if (!url || !suffix) {\r\n            return false;\r\n        }\r\n        return url.indexOf(suffix, url.length - suffix.length) !== -1;\r\n    };\r\n    /**\r\n     * Utils function to remove the login_hint and domain_hint from the i/p extraQueryParameters\r\n     * @param url\r\n     * @param name\r\n     */\r\n    UrlUtils.urlRemoveQueryStringParameter = function (url, name) {\r\n        if (StringUtils.isEmpty(url)) {\r\n            return url;\r\n        }\r\n        var regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\r\n        url = url.replace(regex, \"\");\r\n        // name=value&\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\r\n        url = url.replace(regex, \"\");\r\n        // name=value\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\r\n        url = url.replace(regex, \"\");\r\n        return url;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    UrlUtils.getHashFromUrl = function (urlStringOrFragment) {\r\n        var hashIndex1 = urlStringOrFragment.indexOf(\"#\");\r\n        var hashIndex2 = urlStringOrFragment.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return urlStringOrFragment.substring(hashIndex2 + 2);\r\n        }\r\n        else if (hashIndex1 > -1) {\r\n            return urlStringOrFragment.substring(hashIndex1 + 1);\r\n        }\r\n        return urlStringOrFragment;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Check if the url contains a hash with known properties\r\n     * @ignore\r\n     */\r\n    UrlUtils.urlContainsHash = function (urlString) {\r\n        var parameters = UrlUtils.deserializeHash(urlString);\r\n        return (parameters.hasOwnProperty(ServerHashParamKeys.ERROR_DESCRIPTION) ||\r\n            parameters.hasOwnProperty(ServerHashParamKeys.ERROR) ||\r\n            parameters.hasOwnProperty(ServerHashParamKeys.ACCESS_TOKEN) ||\r\n            parameters.hasOwnProperty(ServerHashParamKeys.ID_TOKEN));\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Returns deserialized portion of URL hash\r\n     * @ignore\r\n     */\r\n    UrlUtils.deserializeHash = function (urlFragment) {\r\n        var hash = UrlUtils.getHashFromUrl(urlFragment);\r\n        return CryptoUtils.deserialize(hash);\r\n    };\r\n    /**\r\n     * @ignore\r\n     * @param {string} URI\r\n     * @returns {string} host from the URI\r\n     *\r\n     * extract URI from the host\r\n     */\r\n    UrlUtils.getHostFromUri = function (uri) {\r\n        // remove http:// or https:// from uri\r\n        var extractedUri = String(uri).replace(/^(https?:)\\/\\//, \"\");\r\n        extractedUri = extractedUri.split(\"/\")[0];\r\n        return extractedUri;\r\n    };\r\n    return UrlUtils;\r\n}());\r\nexport { UrlUtils };\r\n//# sourceMappingURL=UrlUtils.js.map"]},"metadata":{},"sourceType":"module"}