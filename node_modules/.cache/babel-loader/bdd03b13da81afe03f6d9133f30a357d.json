{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport { ClientAuthError } from \"./error/ClientAuthError\";\nimport { TokenUtils } from \"./utils/TokenUtils\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\r\n * @hidden\r\n */\n\nvar IdToken =\n/** @class */\nfunction () {\n  /* tslint:disable:no-string-literal */\n  function IdToken(rawIdToken) {\n    if (StringUtils.isEmpty(rawIdToken)) {\n      throw ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);\n    }\n\n    try {\n      this.rawIdToken = rawIdToken;\n      this.claims = TokenUtils.extractIdToken(rawIdToken);\n\n      if (this.claims) {\n        if (this.claims.hasOwnProperty(\"iss\")) {\n          this.issuer = this.claims[\"iss\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"oid\")) {\n          this.objectId = this.claims[\"oid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"sub\")) {\n          this.subject = this.claims[\"sub\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"tid\")) {\n          this.tenantId = this.claims[\"tid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"ver\")) {\n          this.version = this.claims[\"ver\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"preferred_username\")) {\n          this.preferredName = this.claims[\"preferred_username\"];\n        } else if (this.claims.hasOwnProperty(\"upn\")) {\n          this.preferredName = this.claims[\"upn\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"name\")) {\n          this.name = this.claims[\"name\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"nonce\")) {\n          this.nonce = this.claims[\"nonce\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"exp\")) {\n          this.expiration = this.claims[\"exp\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"home_oid\")) {\n          this.homeObjectId = this.claims[\"home_oid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"sid\")) {\n          this.sid = this.claims[\"sid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"cloud_instance_host_name\")) {\n          this.cloudInstance = this.claims[\"cloud_instance_host_name\"];\n        }\n        /* tslint:enable:no-string-literal */\n\n      }\n    } catch (e) {\n      /*\r\n       * TODO: This error here won't really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.\r\n       * Need to add better error handling here to account for being unable to decode jwts.\r\n       */\n      throw ClientAuthError.createIdTokenParsingError(e);\n    }\n  }\n\n  return IdToken;\n}();\n\nexport { IdToken };","map":{"version":3,"sources":["../src/IdToken.ts"],"names":[],"mappings":"AAAA;;;AAGG;AAEH,SAAS,eAAT,QAAgC,yBAAhC;AACA,SAAS,UAAT,QAA2B,oBAA3B;AAEA,SAAS,WAAT,QAA4B,qBAA5B;AAEA;;AAEG;;AACH,IAAA,OAAA;AAAA;AAAA,YAAA;AAgBI;AACA,WAAA,OAAA,CAAY,UAAZ,EAA8B;AAC1B,QAAI,WAAW,CAAC,OAAZ,CAAoB,UAApB,CAAJ,EAAqC;AACjC,YAAM,eAAe,CAAC,6BAAhB,CAA8C,UAA9C,CAAN;AACH;;AACD,QAAI;AACA,WAAK,UAAL,GAAkB,UAAlB;AACA,WAAK,MAAL,GAAc,UAAU,CAAC,cAAX,CAA0B,UAA1B,CAAd;;AACA,UAAI,KAAK,MAAT,EAAiB;AACb,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,MAAL,GAAc,KAAK,MAAL,CAAY,KAAZ,CAAd;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,QAAL,GAAgB,KAAK,MAAL,CAAY,KAAZ,CAAhB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,OAAL,GAAe,KAAK,MAAL,CAAY,KAAZ,CAAf;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,QAAL,GAAgB,KAAK,MAAL,CAAY,KAAZ,CAAhB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,OAAL,GAAe,KAAK,MAAL,CAAY,KAAZ,CAAf;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,oBAA3B,CAAJ,EAAsD;AAClD,eAAK,aAAL,GAAqB,KAAK,MAAL,CAAY,oBAAZ,CAArB;AACH,SAFD,MAEO,IAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AAC1C,eAAK,aAAL,GAAqB,KAAK,MAAL,CAAY,KAAZ,CAArB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,MAA3B,CAAJ,EAAwC;AACpC,eAAK,IAAL,GAAY,KAAK,MAAL,CAAY,MAAZ,CAAZ;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,OAA3B,CAAJ,EAAyC;AACrC,eAAK,KAAL,GAAa,KAAK,MAAL,CAAY,OAAZ,CAAb;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,UAAL,GAAkB,KAAK,MAAL,CAAY,KAAZ,CAAlB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,UAA3B,CAAJ,EAA4C;AACxC,eAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,UAAZ,CAApB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,GAAL,GAAW,KAAK,MAAL,CAAY,KAAZ,CAAX;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,0BAA3B,CAAJ,EAA4D;AACxD,eAAK,aAAL,GAAqB,KAAK,MAAL,CAAY,0BAAZ,CAArB;AACH;AACD;;AACH;AACJ,KAvDD,CAuDE,OAAO,CAAP,EAAU;AACR;;;AAGG;AACH,YAAM,eAAe,CAAC,yBAAhB,CAA0C,CAA1C,CAAN;AACH;AACJ;;AAEL,SAAA,OAAA;AAAC,CArFD,EAAA","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { ClientAuthError } from \"./error/ClientAuthError\";\r\nimport { TokenUtils } from \"./utils/TokenUtils\";\r\nimport { StringUtils } from \"./utils/StringUtils\";\r\n/**\r\n * @hidden\r\n */\r\nvar IdToken = /** @class */ (function () {\r\n    /* tslint:disable:no-string-literal */\r\n    function IdToken(rawIdToken) {\r\n        if (StringUtils.isEmpty(rawIdToken)) {\r\n            throw ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);\r\n        }\r\n        try {\r\n            this.rawIdToken = rawIdToken;\r\n            this.claims = TokenUtils.extractIdToken(rawIdToken);\r\n            if (this.claims) {\r\n                if (this.claims.hasOwnProperty(\"iss\")) {\r\n                    this.issuer = this.claims[\"iss\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"oid\")) {\r\n                    this.objectId = this.claims[\"oid\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"sub\")) {\r\n                    this.subject = this.claims[\"sub\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"tid\")) {\r\n                    this.tenantId = this.claims[\"tid\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"ver\")) {\r\n                    this.version = this.claims[\"ver\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"preferred_username\")) {\r\n                    this.preferredName = this.claims[\"preferred_username\"];\r\n                }\r\n                else if (this.claims.hasOwnProperty(\"upn\")) {\r\n                    this.preferredName = this.claims[\"upn\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"name\")) {\r\n                    this.name = this.claims[\"name\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"nonce\")) {\r\n                    this.nonce = this.claims[\"nonce\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"exp\")) {\r\n                    this.expiration = this.claims[\"exp\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"home_oid\")) {\r\n                    this.homeObjectId = this.claims[\"home_oid\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"sid\")) {\r\n                    this.sid = this.claims[\"sid\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"cloud_instance_host_name\")) {\r\n                    this.cloudInstance = this.claims[\"cloud_instance_host_name\"];\r\n                }\r\n                /* tslint:enable:no-string-literal */\r\n            }\r\n        }\r\n        catch (e) {\r\n            /*\r\n             * TODO: This error here won't really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.\r\n             * Need to add better error handling here to account for being unable to decode jwts.\r\n             */\r\n            throw ClientAuthError.createIdTokenParsingError(e);\r\n        }\r\n    }\r\n    return IdToken;\r\n}());\r\nexport { IdToken };\r\n//# sourceMappingURL=IdToken.js.map"]},"metadata":{},"sourceType":"module"}